(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('@beyerleinf/ngx-dnd', ['exports', '@angular/core', '@angular/forms'], factory) :
    (global = global || self, factory((global.beyerleinf = global.beyerleinf || {}, global.beyerleinf['ngx-dnd'] = {}), global.ng.core, global.ng.forms));
}(this, function (exports, core, forms) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DataTransferEffect = /** @class */ (function () {
        function DataTransferEffect(name) {
            this.name = name;
        }
        DataTransferEffect.COPY = new DataTransferEffect('copy');
        DataTransferEffect.LINK = new DataTransferEffect('link');
        DataTransferEffect.MOVE = new DataTransferEffect('move');
        DataTransferEffect.NONE = new DataTransferEffect('none');
        return DataTransferEffect;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DragDropConfig = /** @class */ (function () {
        function DragDropConfig() {
            this.onDragStartClass = 'dnd-drag-start';
            this.onDragEnterClass = 'dnd-drag-enter';
            this.onDragOverClass = 'dnd-drag-over';
            this.onSortableDragClass = 'dnd-sortable-drag';
            this.dragEffect = DataTransferEffect.MOVE;
            this.dropEffect = DataTransferEffect.MOVE;
            this.dragCursor = 'move';
            this.defaultCursor = 'pointer';
        }
        DragDropConfig.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */ DragDropConfig.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function DragDropConfig_Factory() { return new DragDropConfig(); }, token: DragDropConfig, providedIn: "root" });
        return DragDropConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DragDropService = /** @class */ (function () {
        function DragDropService() {
            this.allowedDropZones = [];
        }
        DragDropService.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */ DragDropService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function DragDropService_Factory() { return new DragDropService(); }, token: DragDropService, providedIn: "root" });
        return DragDropService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    AbstractHandleDirective = /** @class */ (function () {
        function AbstractHandleDirective(elementReference, dragDropService, config, directive) {
            this.dragDropService = dragDropService;
            this.config = config;
            this.directive = directive;
            this.element = elementReference.nativeElement;
            this.directive.dragHandle = this.element;
        }
        return AbstractHandleDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} obj
     * @return {?}
     */
    function isPresent(obj) {
        return obj !== undefined && obj !== null;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} obj
     * @return {?}
     */
    function isString(obj) {
        return typeof obj === 'string';
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SortableArrayHandler = /** @class */ (function () {
        function SortableArrayHandler() {
        }
        /**
         * @param {?} sortableData
         * @param {?} index
         * @return {?}
         */
        SortableArrayHandler.prototype.getItemAt = /**
         * @param {?} sortableData
         * @param {?} index
         * @return {?}
         */
        function (sortableData, index) {
            return sortableData[index];
        };
        /**
         * @param {?} sortableData
         * @param {?} item
         * @return {?}
         */
        SortableArrayHandler.prototype.indexOf = /**
         * @param {?} sortableData
         * @param {?} item
         * @return {?}
         */
        function (sortableData, item) {
            return sortableData.indexOf(item);
        };
        /**
         * @param {?} sortableData
         * @param {?} index
         * @return {?}
         */
        SortableArrayHandler.prototype.removeItemAt = /**
         * @param {?} sortableData
         * @param {?} index
         * @return {?}
         */
        function (sortableData, index) {
            sortableData.splice(index, 1);
        };
        /**
         * @param {?} sortableData
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        SortableArrayHandler.prototype.insertItemAt = /**
         * @param {?} sortableData
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (sortableData, item, index) {
            sortableData.splice(index, 0, item);
        };
        return SortableArrayHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SortableFormArrayHandler = /** @class */ (function () {
        function SortableFormArrayHandler() {
        }
        /**
         * @param {?} sortableData
         * @param {?} index
         * @return {?}
         */
        SortableFormArrayHandler.prototype.getItemAt = /**
         * @param {?} sortableData
         * @param {?} index
         * @return {?}
         */
        function (sortableData, index) {
            return sortableData.at(index);
        };
        /**
         * @param {?} sortableData
         * @param {?} item
         * @return {?}
         */
        SortableFormArrayHandler.prototype.indexOf = /**
         * @param {?} sortableData
         * @param {?} item
         * @return {?}
         */
        function (sortableData, item) {
            return sortableData.controls.indexOf(item);
        };
        /**
         * @param {?} sortableData
         * @param {?} index
         * @return {?}
         */
        SortableFormArrayHandler.prototype.removeItemAt = /**
         * @param {?} sortableData
         * @param {?} index
         * @return {?}
         */
        function (sortableData, index) {
            sortableData.removeAt(index);
        };
        /**
         * @param {?} sortableData
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        SortableFormArrayHandler.prototype.insertItemAt = /**
         * @param {?} sortableData
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (sortableData, item, index) {
            sortableData.insert(index, item);
        };
        return SortableFormArrayHandler;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var AbstractDirective = /** @class */ (function () {
        function AbstractDirective(elementReference, dragDropService, config, cdr) {
            var _this = this;
            this.dragDropService = dragDropService;
            this.config = config;
            this.cdr = cdr;
            this._dragEnabled = true;
            this.dropEnabled = false;
            this.dropZones = [];
            this.cloneItem = false;
            this.defaultCursor = this.config.defaultCursor;
            this.element = elementReference.nativeElement;
            this.element.style.cursor = this.defaultCursor;
            // Register drop events
            this.element.ondragenter = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return _this.dragEnter(event); });
            this.element.ondragleave = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return _this.dragLeave(event); });
            this.element.ondrop = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return _this.drop(event); });
            this.element.ondragover = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.dragOver(event);
                if (isPresent(event.dataTransfer)) {
                    event.dataTransfer.dropEffect = _this.config.dropEffect.name;
                }
                return false;
            });
            // Register drag events
            this.element.onmousedown = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                _this.target = event.target;
            });
            this.element.ondragstart = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (isPresent(_this.dragHandle)) {
                    if (!_this.dragHandle.contains((/** @type {?} */ (_this.target)))) {
                        event.preventDefault();
                        return;
                    }
                }
                _this.dragStart(event);
                if (isPresent(event.dataTransfer)) {
                    // Required so that this whole thing works in Firefox at all
                    event.dataTransfer.setData('text', '');
                }
            });
            this.element.ondragend = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (_this.element.parentElement && _this.dragHelper) {
                    _this.element.parentElement.removeChild(_this.dragHelper);
                }
                // console.log('ondragend', event.target);
                _this.dragEnd(event);
                // Restore style of dragged element
                /** @type {?} */
                var cursorElem = _this._dragHandle ? _this._dragHandle : _this.element;
                cursorElem.style.cursor = _this.defaultCursor;
            });
        }
        Object.defineProperty(AbstractDirective.prototype, "dragEnabled", {
            get: /**
             * @return {?}
             */
            function () {
                return this._dragEnabled;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._dragEnabled = value;
                this.element.draggable = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractDirective.prototype, "dragHandle", {
            get: /**
             * @return {?}
             */
            function () {
                return this._dragHandle;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._dragHandle = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Run change detection manually to fix an issue in Safari.
         *
         * @memberof AbstractDirective
         */
        /**
         * Run change detection manually to fix an issue in Safari.
         *
         * \@memberof AbstractDirective
         * @return {?}
         */
        AbstractDirective.prototype.detectChanges = /**
         * Run change detection manually to fix an issue in Safari.
         *
         * \@memberof AbstractDirective
         * @return {?}
         */
        function () {
            var _this = this;
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (_this.cdr && !((/** @type {?} */ (_this.cdr))).destroyed) {
                    _this.cdr.detectChanges();
                }
            }), 250);
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        AbstractDirective.prototype.dragEnter = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (this.isDropAllowed(event)) {
                this.dragEnterCallback(event);
            }
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        AbstractDirective.prototype.dragOver = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (this.isDropAllowed(event)) {
                if (isPresent(event.preventDefault)) {
                    event.preventDefault();
                }
                this.dragOverCallback(event);
            }
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        AbstractDirective.prototype.dragLeave = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (this.isDropAllowed(event)) {
                this.dragLeaveCallback(event);
            }
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        AbstractDirective.prototype.drop = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (this.isDropAllowed(event)) {
                this.preventAndStop(event);
                this.dropCallback(event);
                this.detectChanges();
            }
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        AbstractDirective.prototype.dragStart = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (this.dragEnabled) {
                this.dragDropService.allowedDropZones = this.dropZones;
                this.dragStartCallback(event);
            }
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        AbstractDirective.prototype.dragEnd = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            this.dragDropService.allowedDropZones = [];
            this.dragEndCallback(event);
        };
        /**
         * @private
         * @param {?} event
         * @return {?}
         */
        AbstractDirective.prototype.isDropAllowed = /**
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            var e_1, _a;
            if ((this.dragDropService.isDragged ||
                (event.dataTransfer && event.dataTransfer.files)) &&
                this.dropEnabled) {
                if (isPresent(this.allowDrop)) {
                    return this.allowDrop(this.dragDropService.dragData);
                }
                if (this.dropZones.length === 0 &&
                    this.dragDropService.allowedDropZones.length === 0) {
                    return true;
                }
                try {
                    for (var _b = __values(this.dragDropService.allowedDropZones), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var dropZone = _c.value;
                        if (this.dropZones.indexOf(dropZone) !== -1) {
                            return true;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            return false;
        };
        /**
         * Prevent the given events default action from being called and stops it from being propagated further.
         *
         * @memberof AbstractDirective
         */
        /**
         * Prevent the given events default action from being called and stops it from being propagated further.
         *
         * \@memberof AbstractDirective
         * @private
         * @param {?} event
         * @return {?}
         */
        AbstractDirective.prototype.preventAndStop = /**
         * Prevent the given events default action from being called and stops it from being propagated further.
         *
         * \@memberof AbstractDirective
         * @private
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event.preventDefault) {
                event.preventDefault();
            }
            if (event.stopPropagation) {
                event.stopPropagation();
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        AbstractDirective.prototype.dragEnterCallback = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /* noop */
        };
        /**
         * @param {?} event
         * @return {?}
         */
        AbstractDirective.prototype.dragOverCallback = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /* noop */
        };
        /**
         * @param {?} event
         * @return {?}
         */
        AbstractDirective.prototype.dragLeaveCallback = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /* noop */
        };
        /**
         * @param {?} event
         * @return {?}
         */
        AbstractDirective.prototype.dropCallback = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /* noop */
        };
        /**
         * @param {?} event
         * @return {?}
         */
        AbstractDirective.prototype.dragStartCallback = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /* noop */
        };
        /**
         * @param {?} event
         * @return {?}
         */
        AbstractDirective.prototype.dragEndCallback = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /* noop */
        };
        AbstractDirective.propDecorators = {
            dropEnabled: [{ type: core.Input }],
            effectAllowed: [{ type: core.Input }],
            effectCursor: [{ type: core.Input }],
            dropZones: [{ type: core.Input }],
            allowDrop: [{ type: core.Input }],
            dragImage: [{ type: core.Input }],
            cloneItem: [{ type: core.Input }],
            dragEnabled: [{ type: core.Input }]
        };
        return AbstractDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /* tslint:disable directive-selector no-output-on-prefix */
    var DraggableDirective = /** @class */ (function (_super) {
        __extends(DraggableDirective, _super);
        function DraggableDirective(elementReference, dragDropService, config, cdr) {
            var _this = _super.call(this, elementReference, dragDropService, config, cdr) || this;
            _this.onDragStart = new core.EventEmitter();
            _this.onDragEnd = new core.EventEmitter();
            _this.onDragSuccess = new core.EventEmitter();
            _this.defaultCursor = _this.element.style.cursor;
            _this.dragEnabled = true;
            return _this;
        }
        /**
         * @param {?} event
         * @return {?}
         */
        DraggableDirective.prototype.dragStartCallback = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            this.dragDropService.isDragged = true;
            this.dragDropService.dragData = this.dragData;
            this.dragDropService.onDragSuccessCallback = this.onDragSuccess;
            this.element.classList.add(this.config.onDragStartClass);
            this.onDragStart.emit({ dragData: this.dragData, mouseEvent: event });
        };
        /**
         * @param {?} event
         * @return {?}
         */
        DraggableDirective.prototype.dragEndCallback = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            this.dragDropService.isDragged = false;
            this.dragDropService.dragData = null;
            this.dragDropService.onDragSuccessCallback = null;
            this.element.classList.remove(this.config.onDragStartClass);
            this.onDragEnd.emit({ dragData: this.dragData, mouseEvent: event });
        };
        DraggableDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[dnd-draggable]' },] }
        ];
        /** @nocollapse */
        DraggableDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: DragDropService },
            { type: DragDropConfig },
            { type: core.ChangeDetectorRef }
        ]; };
        DraggableDirective.propDecorators = {
            dragData: [{ type: core.Input }],
            onDragStart: [{ type: core.Output }],
            onDragEnd: [{ type: core.Output }],
            onDragSuccess: [{ type: core.Output }]
        };
        return DraggableDirective;
    }(AbstractDirective));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /* tslint:disable directive-selector */
    var DraggableHandleDirective = /** @class */ (function (_super) {
        __extends(DraggableHandleDirective, _super);
        function DraggableHandleDirective(elementReference, dragDropService, config, directive) {
            return _super.call(this, elementReference, dragDropService, config, directive) || this;
        }
        DraggableHandleDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[dnd-draggable-handle]' },] }
        ];
        /** @nocollapse */
        DraggableHandleDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: DragDropService },
            { type: DragDropConfig },
            { type: DraggableDirective }
        ]; };
        return DraggableHandleDirective;
    }(AbstractHandleDirective));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /* tslint:disable directive-selector no-output-on-prefix */
    var DroppableDirective = /** @class */ (function (_super) {
        __extends(DroppableDirective, _super);
        function DroppableDirective(elementReference, dragDropService, config, cdr) {
            var _this = _super.call(this, elementReference, dragDropService, config, cdr) || this;
            _this.onDropSuccess = new core.EventEmitter();
            _this.onDragEnter = new core.EventEmitter();
            _this.onDragOver = new core.EventEmitter();
            _this.onDragLeave = new core.EventEmitter();
            _this.dropEnabled = true;
            return _this;
        }
        /**
         * @param {?} event
         * @return {?}
         */
        DroppableDirective.prototype.dragEnterCallback = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (this.dragDropService.isDragged) {
                this.element.classList.add(this.config.onDragEnterClass);
                this.onDragEnter.emit({
                    dragData: this.dragDropService.dragData,
                    mouseEvent: event,
                });
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        DroppableDirective.prototype.dragOverCallback = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (this.dragDropService.isDragged) {
                this.element.classList.add(this.config.onDragOverClass);
                this.onDragOver.emit({
                    dragData: this.dragDropService.dragData,
                    mouseEvent: event,
                });
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        DroppableDirective.prototype.dragLeaveCallback = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (this.dragDropService.isDragged) {
                this.element.classList.remove(this.config.onDragOverClass);
                this.element.classList.remove(this.config.onDragEnterClass);
                this.onDragLeave.emit({
                    dragData: this.dragDropService.dragData,
                    mouseEvent: event,
                });
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        DroppableDirective.prototype.dropCallback = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var dataTransfer = ((/** @type {?} */ (event))).dataTransfer;
            if (this.dragDropService.isDragged ||
                (isPresent(dataTransfer) && isPresent(dataTransfer.files))) {
                this.onDropSuccess.emit({
                    dragData: this.dragDropService.dragData,
                    mouseEvent: event,
                });
                if (isPresent(this.dragDropService.onDragSuccessCallback)) {
                    this.dragDropService.onDragSuccessCallback.emit({
                        dragData: this.dragDropService.dragData,
                        mouseEvent: event,
                    });
                }
                this.element.classList.remove(this.config.onDragOverClass);
                this.element.classList.remove(this.config.onDragEnterClass);
            }
        };
        DroppableDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[dnd-droppable]' },] }
        ];
        /** @nocollapse */
        DroppableDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: DragDropService },
            { type: DragDropConfig },
            { type: core.ChangeDetectorRef }
        ]; };
        DroppableDirective.propDecorators = {
            onDropSuccess: [{ type: core.Output }],
            onDragEnter: [{ type: core.Output }],
            onDragOver: [{ type: core.Output }],
            onDragLeave: [{ type: core.Output }]
        };
        return DroppableDirective;
    }(AbstractDirective));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DragDropSortableService = /** @class */ (function () {
        /**
         *Creates an instance of DragDropSortableService.
         * @param config The DragDropConfig.
         * @memberof DragDropSortableService
         */
        function DragDropSortableService(config) {
            this.config = config;
        }
        Object.defineProperty(DragDropSortableService.prototype, "element", {
            /**
             * Gets the last element that was marked sortable.
             *
             * @readonly
             * @memberof DragDropSortableService
             */
            get: /**
             * Gets the last element that was marked sortable.
             *
             * \@readonly
             * \@memberof DragDropSortableService
             * @return {?}
             */
            function () {
                return this._element;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Assigns the `onSortableDragClass` to the given element.
         *
         * @param e The element to assign the CSS class to.
         * @memberof DragDropSortableService
         */
        /**
         * Assigns the `onSortableDragClass` to the given element.
         *
         * \@memberof DragDropSortableService
         * @param {?} e The element to assign the CSS class to.
         * @return {?}
         */
        DragDropSortableService.prototype.markSortable = /**
         * Assigns the `onSortableDragClass` to the given element.
         *
         * \@memberof DragDropSortableService
         * @param {?} e The element to assign the CSS class to.
         * @return {?}
         */
        function (e) {
            if (isPresent(this._element)) {
                this._element.classList.remove(this.config.onSortableDragClass);
            }
            if (isPresent(e)) {
                this._element = e;
                this._element.classList.add(this.config.onSortableDragClass);
            }
        };
        DragDropSortableService.decorators = [
            { type: core.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        DragDropSortableService.ctorParameters = function () { return [
            { type: DragDropConfig }
        ]; };
        /** @nocollapse */ DragDropSortableService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function DragDropSortableService_Factory() { return new DragDropSortableService(core.ɵɵinject(DragDropConfig)); }, token: DragDropSortableService, providedIn: "root" });
        return DragDropSortableService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /* tslint:disable directive-selector */
    var SortableContainerDirective = /** @class */ (function (_super) {
        __extends(SortableContainerDirective, _super);
        function SortableContainerDirective(elementRef, dragDropService, config, cdr, sortableDataService) {
            var _this = _super.call(this, elementRef, dragDropService, config, cdr) || this;
            _this.sortableDataService = sortableDataService;
            _this._sortableData = [];
            _this.dragEnabled = false;
            return _this;
        }
        Object.defineProperty(SortableContainerDirective.prototype, "sortableData", {
            get: /**
             * @return {?}
             */
            function () {
                return this._sortableData;
            },
            set: /**
             * @param {?} sortableData
             * @return {?}
             */
            function (sortableData) {
                this._sortableData = sortableData;
                if (sortableData instanceof forms.FormArray) {
                    this._sortableHandler = new SortableFormArrayHandler();
                }
                else {
                    this._sortableHandler = new SortableArrayHandler();
                }
                this.dropEnabled = !!this._sortableData;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} event
         * @return {?}
         */
        SortableContainerDirective.prototype.dragEnterCallback = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (this.sortableDataService.isDragged) {
                /** @type {?} */
                var item = this.sortableDataService.sortableContainer.getItemAt(this.sortableDataService.index);
                if (this.indexOf(item === -1)) {
                    this.sortableDataService.sortableContainer.removeItemAt(this.sortableDataService.index);
                    if (this.sortableDataService.sortableContainer.sortableData.length === 0) {
                        this.sortableDataService.sortableContainer.dropEnabled = true;
                    }
                    this.insertItemAt(item, 0);
                    this.sortableDataService.sortableContainer = this;
                    this.sortableDataService.index = 0;
                }
                this.detectChanges();
            }
        };
        /**
         * @param {?} index
         * @return {?}
         */
        SortableContainerDirective.prototype.getItemAt = /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            return this._sortableHandler.getItemAt(this._sortableData, index);
        };
        /**
         * @param {?} item
         * @return {?}
         */
        SortableContainerDirective.prototype.indexOf = /**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            return this._sortableHandler.indexOf(this._sortableData, item);
        };
        /**
         * @param {?} index
         * @return {?}
         */
        SortableContainerDirective.prototype.removeItemAt = /**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            this._sortableHandler.removeItemAt(this._sortableData, index);
        };
        /**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        SortableContainerDirective.prototype.insertItemAt = /**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (item, index) {
            this._sortableHandler.insertItemAt(this._sortableData, item, index);
        };
        SortableContainerDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[dnd-sortable-container]' },] }
        ];
        /** @nocollapse */
        SortableContainerDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: DragDropService },
            { type: DragDropConfig },
            { type: core.ChangeDetectorRef },
            { type: DragDropSortableService }
        ]; };
        SortableContainerDirective.propDecorators = {
            sortableData: [{ type: core.Input }]
        };
        return SortableContainerDirective;
    }(AbstractDirective));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /* tslint:disable directive-selector no-output-on-prefix */
    var SortableDirective = /** @class */ (function (_super) {
        __extends(SortableDirective, _super);
        function SortableDirective(elementRef, dragDropService, config, sortableContainer, sortableDataService, cdr) {
            var _this = _super.call(this, elementRef, dragDropService, config, cdr) || this;
            _this.sortableContainer = sortableContainer;
            _this.sortableDataService = sortableDataService;
            _this.onDragSuccess = new core.EventEmitter();
            _this.onDragStart = new core.EventEmitter();
            _this.onDragOver = new core.EventEmitter();
            _this.onDragEnd = new core.EventEmitter();
            _this.onDropSuccess = new core.EventEmitter();
            _this.dropZones = _this.sortableContainer.dropZones;
            _this.dragEnabled = true;
            _this.dropEnabled = true;
            return _this;
        }
        /**
         * @return {?}
         */
        SortableDirective.prototype.dragStartCallback = /**
         * @return {?}
         */
        function () {
            this.sortableDataService.isDragged = true;
            this.sortableDataService.sortableContainer = this.sortableContainer;
            this.sortableDataService.index = this.sortableIndex;
            this.sortableDataService.markSortable(this.element);
            this.dragDropService.isDragged = true;
            this.dragDropService.dragData = this.dragData;
            this.dragDropService.onDragSuccessCallback = this.onDragSuccess;
            this.onDragStart.emit(this.dragDropService.dragData);
        };
        /**
         * @return {?}
         */
        SortableDirective.prototype.dragOverCallback = /**
         * @return {?}
         */
        function () {
            if (this.sortableDataService.isDragged &&
                this.element !== this.sortableDataService.element) {
                this.sortableDataService.sortableContainer = this.sortableContainer;
                this.sortableDataService.index = this.sortableIndex;
                this.sortableDataService.markSortable(this.element);
                this.onDragOver.emit(this.dragDropService.dragData);
            }
        };
        /**
         * @return {?}
         */
        SortableDirective.prototype.dragEndCallback = /**
         * @return {?}
         */
        function () {
            this.sortableDataService.isDragged = false;
            this.sortableDataService.sortableContainer = null;
            this.sortableDataService.index = null;
            this.sortableDataService.markSortable(null);
            this.dragDropService.isDragged = false;
            this.dragDropService.dragData = null;
            this.dragDropService.onDragSuccessCallback = null;
            this.onDragEnd.emit(this.dragDropService.dragData);
        };
        /**
         * @return {?}
         */
        SortableDirective.prototype.dragEnterCallback = /**
         * @return {?}
         */
        function () {
            if (this.sortableDataService.isDragged) {
                this.sortableDataService.markSortable(this.element);
                if (this.sortableIndex !== this.sortableDataService.index ||
                    this.sortableDataService.sortableContainer.sortableData !==
                        this.sortableContainer.sortableData) {
                    /** @type {?} */
                    var item = this.sortableDataService.sortableContainer.getItemAt(this.sortableDataService.index);
                    this.sortableDataService.sortableContainer.removeItemAt(this.sortableDataService.index);
                    if (this.sortableDataService.sortableContainer.sortableData.length === 0) {
                        this.sortableDataService.sortableContainer.dropEnabled = true;
                    }
                    this.sortableContainer.insertItemAt(item, this.sortableIndex);
                    if (this.sortableContainer.dropEnabled) {
                        this.sortableContainer.dropEnabled = false;
                    }
                    this.sortableDataService.sortableContainer = this.sortableContainer;
                    this.sortableDataService.index = this.sortableIndex;
                    this.detectChanges();
                }
            }
        };
        /**
         * @return {?}
         */
        SortableDirective.prototype.dropCallback = /**
         * @return {?}
         */
        function () {
            if (this.sortableDataService.isDragged) {
                this.onDropSuccess.emit(this.dragDropService.dragData);
                if (this.dragDropService.onDragSuccessCallback) {
                    this.dragDropService.onDragSuccessCallback.emit(this.dragDropService.dragData);
                }
                this.sortableContainer.detectChanges();
            }
        };
        SortableDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[dnd-sortable]' },] }
        ];
        /** @nocollapse */
        SortableDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: DragDropService },
            { type: DragDropConfig },
            { type: SortableContainerDirective },
            { type: DragDropSortableService },
            { type: core.ChangeDetectorRef }
        ]; };
        SortableDirective.propDecorators = {
            sortableIndex: [{ type: core.Input }],
            dragData: [{ type: core.Input }],
            onDragSuccess: [{ type: core.Output }],
            onDragStart: [{ type: core.Output }],
            onDragOver: [{ type: core.Output }],
            onDragEnd: [{ type: core.Output }],
            onDropSuccess: [{ type: core.Output }]
        };
        return SortableDirective;
    }(AbstractDirective));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /* tslint:disable directive-selector */
    var SortableHandleDirective = /** @class */ (function (_super) {
        __extends(SortableHandleDirective, _super);
        function SortableHandleDirective(elementRef, dragDropService, config, directive) {
            return _super.call(this, elementRef, dragDropService, config, directive) || this;
        }
        SortableHandleDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[dnd-sortable-handle]' },] }
        ];
        /** @nocollapse */
        SortableHandleDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: DragDropService },
            { type: DragDropConfig },
            { type: SortableDirective }
        ]; };
        return SortableHandleDirective;
    }(AbstractHandleDirective));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DndModule = /** @class */ (function () {
        function DndModule() {
        }
        /**
         * @return {?}
         */
        DndModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: DndModule,
                providers: [DragDropConfig],
            };
        };
        DndModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            DraggableDirective,
                            DraggableHandleDirective,
                            DroppableDirective,
                            SortableContainerDirective,
                            SortableDirective,
                            SortableHandleDirective,
                        ],
                        exports: [
                            DraggableDirective,
                            DraggableHandleDirective,
                            DroppableDirective,
                            SortableContainerDirective,
                            SortableDirective,
                            SortableHandleDirective,
                        ],
                    },] }
        ];
        return DndModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DragImage = /** @class */ (function () {
        function DragImage(imageElement, x_offset, y_offset) {
            if (x_offset === void 0) { x_offset = 0; }
            if (y_offset === void 0) { y_offset = 0; }
            this.imageElement = imageElement;
            this.x_offset = x_offset;
            this.y_offset = y_offset;
            if (isString(this.imageElement)) {
                /** @type {?} */
                var imgScr = this.imageElement;
                this.imageElement = new HTMLImageElement();
                this.imageElement.src = imgScr;
            }
        }
        return DragImage;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DragDropData = /** @class */ (function () {
        function DragDropData() {
        }
        return DragDropData;
    }());

    exports.DataTransferEffect = DataTransferEffect;
    exports.DndModule = DndModule;
    exports.DragDropConfig = DragDropConfig;
    exports.DragDropData = DragDropData;
    exports.DragDropService = DragDropService;
    exports.DragDropSortableService = DragDropSortableService;
    exports.DragImage = DragImage;
    exports.DraggableDirective = DraggableDirective;
    exports.DraggableHandleDirective = DraggableHandleDirective;
    exports.DroppableDirective = DroppableDirective;
    exports.SortableContainerDirective = SortableContainerDirective;
    exports.SortableDirective = SortableDirective;
    exports.SortableHandleDirective = SortableHandleDirective;
    exports.ɵa = AbstractDirective;
    exports.ɵb = AbstractHandleDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=beyerleinf-ngx-dnd.umd.js.map

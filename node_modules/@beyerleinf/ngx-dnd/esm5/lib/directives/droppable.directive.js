/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Directive, ElementRef, EventEmitter, Output, } from '@angular/core';
import { DragDropConfig } from '../config/drag-drop-config';
import { DragDropService } from '../service/drag-drop/drag-drop.service';
import { isPresent } from '../util';
import { AbstractDirective } from './abstract/abstract.directive';
/* tslint:disable directive-selector no-output-on-prefix */
var DroppableDirective = /** @class */ (function (_super) {
    tslib_1.__extends(DroppableDirective, _super);
    function DroppableDirective(elementReference, dragDropService, config, cdr) {
        var _this = _super.call(this, elementReference, dragDropService, config, cdr) || this;
        _this.onDropSuccess = new EventEmitter();
        _this.onDragEnter = new EventEmitter();
        _this.onDragOver = new EventEmitter();
        _this.onDragLeave = new EventEmitter();
        _this.dropEnabled = true;
        return _this;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    DroppableDirective.prototype.dragEnterCallback = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.dragDropService.isDragged) {
            this.element.classList.add(this.config.onDragEnterClass);
            this.onDragEnter.emit({
                dragData: this.dragDropService.dragData,
                mouseEvent: event,
            });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DroppableDirective.prototype.dragOverCallback = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.dragDropService.isDragged) {
            this.element.classList.add(this.config.onDragOverClass);
            this.onDragOver.emit({
                dragData: this.dragDropService.dragData,
                mouseEvent: event,
            });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DroppableDirective.prototype.dragLeaveCallback = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.dragDropService.isDragged) {
            this.element.classList.remove(this.config.onDragOverClass);
            this.element.classList.remove(this.config.onDragEnterClass);
            this.onDragLeave.emit({
                dragData: this.dragDropService.dragData,
                mouseEvent: event,
            });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DroppableDirective.prototype.dropCallback = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var dataTransfer = ((/** @type {?} */ (event))).dataTransfer;
        if (this.dragDropService.isDragged ||
            (isPresent(dataTransfer) && isPresent(dataTransfer.files))) {
            this.onDropSuccess.emit({
                dragData: this.dragDropService.dragData,
                mouseEvent: event,
            });
            if (isPresent(this.dragDropService.onDragSuccessCallback)) {
                this.dragDropService.onDragSuccessCallback.emit({
                    dragData: this.dragDropService.dragData,
                    mouseEvent: event,
                });
            }
            this.element.classList.remove(this.config.onDragOverClass);
            this.element.classList.remove(this.config.onDragEnterClass);
        }
    };
    DroppableDirective.decorators = [
        { type: Directive, args: [{ selector: '[dnd-droppable]' },] }
    ];
    /** @nocollapse */
    DroppableDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DragDropService },
        { type: DragDropConfig },
        { type: ChangeDetectorRef }
    ]; };
    DroppableDirective.propDecorators = {
        onDropSuccess: [{ type: Output }],
        onDragEnter: [{ type: Output }],
        onDragOver: [{ type: Output }],
        onDragLeave: [{ type: Output }]
    };
    return DroppableDirective;
}(AbstractDirective));
export { DroppableDirective };
if (false) {
    /** @type {?} */
    DroppableDirective.prototype.onDropSuccess;
    /** @type {?} */
    DroppableDirective.prototype.onDragEnter;
    /** @type {?} */
    DroppableDirective.prototype.onDragOver;
    /** @type {?} */
    DroppableDirective.prototype.onDragLeave;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcHBhYmxlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BiZXllcmxlaW5mL25neC1kbmQvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9kcm9wcGFibGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUNMLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFFWixNQUFNLEdBQ1AsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRTVELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUN6RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRXBDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLCtCQUErQixDQUFDOztBQUdsRTtJQUN3Qyw4Q0FBaUI7SUFNdkQsNEJBQ0UsZ0JBQTRCLEVBQzVCLGVBQWdDLEVBQ2hDLE1BQXNCLEVBQ3RCLEdBQXNCO1FBSnhCLFlBTUUsa0JBQU0sZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQUMsU0FRdEQ7UUFOQyxLQUFJLENBQUMsYUFBYSxHQUFHLElBQUksWUFBWSxFQUFnQixDQUFDO1FBQ3RELEtBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxZQUFZLEVBQWdCLENBQUM7UUFDcEQsS0FBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLFlBQVksRUFBZ0IsQ0FBQztRQUNuRCxLQUFJLENBQUMsV0FBVyxHQUFHLElBQUksWUFBWSxFQUFnQixDQUFDO1FBRXBELEtBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDOztJQUMxQixDQUFDOzs7OztJQUVELDhDQUFpQjs7OztJQUFqQixVQUFrQixLQUFpQjtRQUNqQyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxFQUFFO1lBQ2xDLElBQUksQ0FBQyxPQUFPLENBQUMs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cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT3V0cHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgRHJhZ0Ryb3BDb25maWcgfSBmcm9tICcuLi9jb25maWcvZHJhZy1kcm9wLWNvbmZpZyc7XG5pbXBvcnQgeyBEcmFnRHJvcERhdGEgfSBmcm9tICcuLi9tb2RlbHMvZHJhZy1kcm9wLWRhdGEubW9kZWwnO1xuaW1wb3J0IHsgRHJhZ0Ryb3BTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZS9kcmFnLWRyb3AvZHJhZy1kcm9wLnNlcnZpY2UnO1xuaW1wb3J0IHsgaXNQcmVzZW50IH0gZnJvbSAnLi4vdXRpbCc7XG5cbmltcG9ydCB7IEFic3RyYWN0RGlyZWN0aXZlIH0gZnJvbSAnLi9hYnN0cmFjdC9hYnN0cmFjdC5kaXJlY3RpdmUnO1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZSBkaXJlY3RpdmUtc2VsZWN0b3Igbm8tb3V0cHV0LW9uLXByZWZpeCAqL1xuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW2RuZC1kcm9wcGFibGVdJyB9KVxuZXhwb3J0IGNsYXNzIERyb3BwYWJsZURpcmVjdGl2ZSBleHRlbmRzIEFic3RyYWN0RGlyZWN0aXZlIHtcbiAgQE91dHB1dCgpIG9uRHJvcFN1Y2Nlc3M6IEV2ZW50RW1pdHRlcjxEcmFnRHJvcERhdGE+O1xuICBAT3V0cHV0KCkgb25EcmFnRW50ZXI6IEV2ZW50RW1pdHRlcjxEcmFnRHJvcERhdGE+O1xuICBAT3V0cHV0KCkgb25EcmFnT3ZlcjogRXZlbnRFbWl0dGVyPERyYWdEcm9wRGF0YT47XG4gIEBPdXRwdXQoKSBvbkRyYWdMZWF2ZTogRXZlbnRFbWl0dGVyPERyYWdEcm9wRGF0YT47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgZWxlbWVudFJlZmVyZW5jZTogRWxlbWVudFJlZixcbiAgICBkcmFnRHJvcFNlcnZpY2U6IERyYWdEcm9wU2VydmljZSxcbiAgICBjb25maWc6IERyYWdEcm9wQ29uZmlnLFxuICAgIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWZcbiAgKSB7XG4gICAgc3VwZXIoZWxlbWVudFJlZmVyZW5jZSwgZHJhZ0Ryb3BTZXJ2aWNlLCBjb25maWcsIGNkcik7XG5cbiAgICB0aGlzLm9uRHJvcFN1Y2Nlc3MgPSBuZXcgRXZlbnRFbWl0dGVyPERyYWdEcm9wRGF0YT4oKTtcbiAgICB0aGlzLm9uRHJhZ0VudGVyID0gbmV3IEV2ZW50RW1pdHRlcjxEcmFnRHJvcERhdGE+KCk7XG4gICAgdGhpcy5vbkRyYWdPdmVyID0gbmV3IEV2ZW50RW1pdHRlcjxEcmFnRHJvcERhdGE+KCk7XG4gICAgdGhpcy5vbkRyYWdMZWF2ZSA9IG5ldyBFdmVudEVtaXR0ZXI8RHJhZ0Ryb3BEYXRhPigpO1xuXG4gICAgdGhpcy5kcm9wRW5hYmxlZCA9IHRydWU7XG4gIH1cblxuICBkcmFnRW50ZXJDYWxsYmFjayhldmVudDogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmRyYWdEcm9wU2VydmljZS5pc0RyYWdnZWQpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuY29uZmlnLm9uRHJhZ0VudGVyQ2xhc3MpO1xuICAgICAgdGhpcy5vbkRyYWdFbnRlci5lbWl0KHtcbiAgICAgICAgZHJhZ0RhdGE6IHRoaXMuZHJhZ0Ryb3BTZXJ2aWNlLmRyYWdEYXRhLFxuICAgICAgICBtb3VzZUV2ZW50OiBldmVudCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGRyYWdPdmVyQ2FsbGJhY2soZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kcmFnRHJvcFNlcnZpY2UuaXNEcmFnZ2VkKSB7XG4gICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLmNvbmZpZy5vbkRyYWdPdmVyQ2xhc3MpO1xuICAgICAgdGhpcy5vbkRyYWdPdmVyLmVtaXQoe1xuICAgICAgICBkcmFnRGF0YTogdGhpcy5kcmFnRHJvcFNlcnZpY2UuZHJhZ0RhdGEsXG4gICAgICAgIG1vdXNlRXZlbnQ6IGV2ZW50LFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZHJhZ0xlYXZlQ2FsbGJhY2soZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5kcmFnRHJvcFNlcnZpY2UuaXNEcmFnZ2VkKSB7XG4gICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNvbmZpZy5vbkRyYWdPdmVyQ2xhc3MpO1xuICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5jb25maWcub25EcmFnRW50ZXJDbGFzcyk7XG4gICAgICB0aGlzLm9uRHJhZ0xlYXZlLmVtaXQoe1xuICAgICAgICBkcmFnRGF0YTogdGhpcy5kcmFnRHJvcFNlcnZpY2UuZHJhZ0RhdGEsXG4gICAgICAgIG1vdXNlRXZlbnQ6IGV2ZW50LFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZHJvcENhbGxiYWNrKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgY29uc3QgZGF0YVRyYW5zZmVyID0gKGV2ZW50IGFzIGFueSkuZGF0YVRyYW5zZmVyO1xuXG4gICAgaWYgKFxuICAgICAgdGhpcy5kcmFnRHJvcFNlcnZpY2UuaXNEcmFnZ2VkIHx8XG4gICAgICAoaXNQcmVzZW50KGRhdGFUcmFuc2ZlcikgJiYgaXNQcmVzZW50KGRhdGFUcmFuc2Zlci5maWxlcykpXG4gICAgKSB7XG4gICAgICB0aGlzLm9uRHJvcFN1Y2Nlc3MuZW1pdCh7XG4gICAgICAgIGRyYWdEYXRhOiB0aGlzLmRyYWdEcm9wU2VydmljZS5kcmFnRGF0YSxcbiAgICAgICAgbW91c2VFdmVudDogZXZlbnQsXG4gICAgICB9KTtcblxuICAgICAgaWYgKGlzUHJlc2VudCh0aGlzLmRyYWdEcm9wU2VydmljZS5vbkRyYWdTdWNjZXNzQ2FsbGJhY2spKSB7XG4gICAgICAgIHRoaXMuZHJhZ0Ryb3BTZXJ2aWNlLm9uRHJhZ1N1Y2Nlc3NDYWxsYmFjay5lbWl0KHtcbiAgICAgICAgICBkcmFnRGF0YTogdGhpcy5kcmFnRHJvcFNlcnZpY2UuZHJhZ0RhdGEsXG4gICAgICAgICAgbW91c2VFdmVudDogZXZlbnQsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNvbmZpZy5vbkRyYWdPdmVyQ2xhc3MpO1xuICAgICAgdGhpcy5lbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5jb25maWcub25EcmFnRW50ZXJDbGFzcyk7XG4gICAgfVxuICB9XG59XG4iXX0=
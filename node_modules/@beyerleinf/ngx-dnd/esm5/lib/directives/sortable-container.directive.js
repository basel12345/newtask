/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Directive, ElementRef, Input } from '@angular/core';
import { FormArray } from '@angular/forms';
import { DragDropConfig } from '../config/drag-drop-config';
import { DragDropSortableService } from '../service/drag-drop-sortable/drag-drop-sortable.service';
import { DragDropService } from '../service/drag-drop/drag-drop.service';
import { SortableArrayHandler, SortableFormArrayHandler } from '../util';
import { AbstractDirective } from './abstract/abstract.directive';
/* tslint:disable directive-selector */
var SortableContainerDirective = /** @class */ (function (_super) {
    tslib_1.__extends(SortableContainerDirective, _super);
    function SortableContainerDirective(elementRef, dragDropService, config, cdr, sortableDataService) {
        var _this = _super.call(this, elementRef, dragDropService, config, cdr) || this;
        _this.sortableDataService = sortableDataService;
        _this._sortableData = [];
        _this.dragEnabled = false;
        return _this;
    }
    Object.defineProperty(SortableContainerDirective.prototype, "sortableData", {
        get: /**
         * @return {?}
         */
        function () {
            return this._sortableData;
        },
        set: /**
         * @param {?} sortableData
         * @return {?}
         */
        function (sortableData) {
            this._sortableData = sortableData;
            if (sortableData instanceof FormArray) {
                this._sortableHandler = new SortableFormArrayHandler();
            }
            else {
                this._sortableHandler = new SortableArrayHandler();
            }
            this.dropEnabled = !!this._sortableData;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} event
     * @return {?}
     */
    SortableContainerDirective.prototype.dragEnterCallback = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.sortableDataService.isDragged) {
            /** @type {?} */
            var item = this.sortableDataService.sortableContainer.getItemAt(this.sortableDataService.index);
            if (this.indexOf(item === -1)) {
                this.sortableDataService.sortableContainer.removeItemAt(this.sortableDataService.index);
                if (this.sortableDataService.sortableContainer.sortableData.length === 0) {
                    this.sortableDataService.sortableContainer.dropEnabled = true;
                }
                this.insertItemAt(item, 0);
                this.sortableDataService.sortableContainer = this;
                this.sortableDataService.index = 0;
            }
            this.detectChanges();
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    SortableContainerDirective.prototype.getItemAt = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this._sortableHandler.getItemAt(this._sortableData, index);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    SortableContainerDirective.prototype.indexOf = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        return this._sortableHandler.indexOf(this._sortableData, item);
    };
    /**
     * @param {?} index
     * @return {?}
     */
    SortableContainerDirective.prototype.removeItemAt = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this._sortableHandler.removeItemAt(this._sortableData, index);
    };
    /**
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    SortableContainerDirective.prototype.insertItemAt = /**
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    function (item, index) {
        this._sortableHandler.insertItemAt(this._sortableData, item, index);
    };
    SortableContainerDirective.decorators = [
        { type: Directive, args: [{ selector: '[dnd-sortable-container]' },] }
    ];
    /** @nocollapse */
    SortableContainerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DragDropService },
        { type: DragDropConfig },
        { type: ChangeDetectorRef },
        { type: DragDropSortableService }
    ]; };
    SortableContainerDirective.propDecorators = {
        sortableData: [{ type: Input }]
    };
    return SortableContainerDirective;
}(AbstractDirective));
export { SortableContainerDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SortableContainerDirective.prototype._sortableData;
    /**
     * @type {?}
     * @private
     */
    SortableContainerDirective.prototype._sortableHandler;
    /**
     * @type {?}
     * @private
     */
    SortableContainerDirective.prototype.sortableDataService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydGFibGUtY29udGFpbmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BiZXllcmxlaW5mL25neC1kbmQvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9zb3J0YWJsZS1jb250YWluZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMERBQTBELENBQUM7QUFDbkcsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSx3QkFBd0IsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUV6RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQzs7QUFHbEU7SUFDZ0Qsc0RBQWlCO0lBb0IvRCxvQ0FDRSxVQUFzQixFQUN0QixlQUFnQyxFQUNoQyxNQUFzQixFQUN0QixHQUFzQixFQUNkLG1CQUE0QztRQUx0RCxZQU9FLGtCQUFNLFVBQVUsRUFBRSxlQUFlLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FBQyxTQUdoRDtRQUxTLHlCQUFtQixHQUFuQixtQkFBbUIsQ0FBeUI7UUFHcEQsS0FBSSxDQUFDLGFBQWEsR0FBRyxFQUFFLENBQUM7UUFDeEIsS0FBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7O0lBQzNCLENBQUM7SUExQkQsc0JBQ0ksb0RBQVk7Ozs7UUFXaEI7WUFDRSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDNUIsQ0FBQzs7Ozs7UUFkRCxVQUNpQixZQUFvQztZQUNuRCxJQUFJLENBQUMsYUFBYSxHQUFHLFlBQVksQ0FBQztZQUNsQyxJQUFJLFlBQVksWUFBWSxTQUFTLEVBQUU7Z0JBQ3JDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLHdCQUF3QixFQUFFLENBQUM7YUFDeEQ7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksb0JBQW9CLEVBQUUsQ0FBQzthQUNwRDtZQUVELElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDMUMsQ0FBQzs7O09BQUE7Ozs7O0lBa0JELHNEQUFpQjs7OztJQUFqQixVQUFrQixLQUFZO1FBQzVCLElBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsRUFBRTs7Z0JBQ2hDLElBQUksR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUMvRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUMvQjtZQUVELElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDN0IsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FDckQsSUFBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FDL0IsQ0FBQztnQkFFRixJQUNFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsTUFBTSxLQUFLLENBQUMsRUFDcEU7b0JBQ0EsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7aUJBQy9EO2dCQUVELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUMzQixJQUFJLENBQUMsbUJBQW1CLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO2dCQUNsRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQzthQUNwQztZQUVELElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUN0QjtJQUNILENBQUM7Ozs7O0lBRUQsOENBQVM7Ozs7SUFBVCxVQUFVLEtBQWE7UUFDckIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDcEUsQ0FBQzs7Ozs7SUFFRCw0Q0FBTzs7OztJQUFQLFVBQVEsSUFBUztRQUNmLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2pFLENBQUM7Ozs7O0lBRUQsaURBQVk7Ozs7SUFBWixVQUFhLEtBQWE7UUFDeEIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2hFLENBQUM7Ozs7OztJQUVELGlEQUFZOzs7OztJQUFaLFVBQWEsSUFBUyxFQUFFLEtBQWE7UUFDbkMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN0RSxDQUFDOztnQkF6RUYsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLDBCQUEwQixFQUFFOzs7O2dCQVhaLFVBQVU7Z0JBS3hDLGVBQWU7Z0JBRmYsY0FBYztnQkFIZCxpQkFBaUI7Z0JBSWpCLHVCQUF1Qjs7OytCQVk3QixLQUFLOztJQXFFUixpQ0FBQztDQUFBLEFBMUVELENBQ2dELGlCQUFpQixHQXlFaEU7U0F6RVksMEJBQTBCOzs7Ozs7SUFDckMsbURBQXlDOzs7OztJQUN6QyxzREFBMEU7Ozs7O0lBdUJ4RSx5REFBb0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRm9ybUFycmF5IH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuXG5pbXBvcnQgeyBEcmFnRHJvcENvbmZpZyB9IGZyb20gJy4uL2NvbmZpZy9kcmFnLWRyb3AtY29uZmlnJztcbmltcG9ydCB7IERyYWdEcm9wU29ydGFibGVTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZS9kcmFnLWRyb3Atc29ydGFibGUvZHJhZy1kcm9wLXNvcnRhYmxlLnNlcnZpY2UnO1xuaW1wb3J0IHsgRHJhZ0Ryb3BTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZS9kcmFnLWRyb3AvZHJhZy1kcm9wLnNlcnZpY2UnO1xuaW1wb3J0IHsgU29ydGFibGVBcnJheUhhbmRsZXIsIFNvcnRhYmxlRm9ybUFycmF5SGFuZGxlciB9IGZyb20gJy4uL3V0aWwnO1xuXG5pbXBvcnQgeyBBYnN0cmFjdERpcmVjdGl2ZSB9IGZyb20gJy4vYWJzdHJhY3QvYWJzdHJhY3QuZGlyZWN0aXZlJztcblxuLyogdHNsaW50OmRpc2FibGUgZGlyZWN0aXZlLXNlbGVjdG9yICovXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbZG5kLXNvcnRhYmxlLWNvbnRhaW5lcl0nIH0pXG5leHBvcnQgY2xhc3MgU29ydGFibGVDb250YWluZXJEaXJlY3RpdmUgZXh0ZW5kcyBBYnN0cmFjdERpcmVjdGl2ZSB7XG4gIHByaXZhdGUgX3NvcnRhYmxlRGF0YTogYW55W10gfCBGb3JtQXJyYXk7XG4gIHByaXZhdGUgX3NvcnRhYmxlSGFuZGxlcjogU29ydGFibGVGb3JtQXJyYXlIYW5kbGVyIHwgU29ydGFibGVBcnJheUhhbmRsZXI7XG5cbiAgQElucHV0KClcbiAgc2V0IHNvcnRhYmxlRGF0YShzb3J0YWJsZURhdGE6IEFycmF5PGFueT4gfCBGb3JtQXJyYXkpIHtcbiAgICB0aGlzLl9zb3J0YWJsZURhdGEgPSBzb3J0YWJsZURhdGE7XG4gICAgaWYgKHNvcnRhYmxlRGF0YSBpbnN0YW5jZW9mIEZvcm1BcnJheSkge1xuICAgICAgdGhpcy5fc29ydGFibGVIYW5kbGVyID0gbmV3IFNvcnRhYmxlRm9ybUFycmF5SGFuZGxlcigpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zb3J0YWJsZUhhbmRsZXIgPSBuZXcgU29ydGFibGVBcnJheUhhbmRsZXIoKTtcbiAgICB9XG5cbiAgICB0aGlzLmRyb3BFbmFibGVkID0gISF0aGlzLl9zb3J0YWJsZURhdGE7XG4gIH1cblxuICBnZXQgc29ydGFibGVEYXRhKCk6IEFycmF5PGFueT4gfCBGb3JtQXJyYXkge1xuICAgIHJldHVybiB0aGlzLl9zb3J0YWJsZURhdGE7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihcbiAgICBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIGRyYWdEcm9wU2VydmljZTogRHJhZ0Ryb3BTZXJ2aWNlLFxuICAgIGNvbmZpZzogRHJhZ0Ryb3BDb25maWcsXG4gICAgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBwcml2YXRlIHNvcnRhYmxlRGF0YVNlcnZpY2U6IERyYWdEcm9wU29ydGFibGVTZXJ2aWNlXG4gICkge1xuICAgIHN1cGVyKGVsZW1lbnRSZWYsIGRyYWdEcm9wU2VydmljZSwgY29uZmlnLCBjZHIpO1xuICAgIHRoaXMuX3NvcnRhYmxlRGF0YSA9IFtdO1xuICAgIHRoaXMuZHJhZ0VuYWJsZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGRyYWdFbnRlckNhbGxiYWNrKGV2ZW50OiBFdmVudCk6IHZvaWQge1xuICAgIGlmICh0aGlzLnNvcnRhYmxlRGF0YVNlcnZpY2UuaXNEcmFnZ2VkKSB7XG4gICAgICBjb25zdCBpdGVtID0gdGhpcy5zb3J0YWJsZURhdGFTZXJ2aWNlLnNvcnRhYmxlQ29udGFpbmVyLmdldEl0ZW1BdChcbiAgICAgICAgdGhpcy5zb3J0YWJsZURhdGFTZXJ2aWNlLmluZGV4XG4gICAgICApO1xuXG4gICAgICBpZiAodGhpcy5pbmRleE9mKGl0ZW0gPT09IC0xKSkge1xuICAgICAgICB0aGlzLnNvcnRhYmxlRGF0YVNlcnZpY2Uuc29ydGFibGVDb250YWluZXIucmVtb3ZlSXRlbUF0KFxuICAgICAgICAgIHRoaXMuc29ydGFibGVEYXRhU2VydmljZS5pbmRleFxuICAgICAgICApO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aGlzLnNvcnRhYmxlRGF0YVNlcnZpY2Uuc29ydGFibGVDb250YWluZXIuc29ydGFibGVEYXRhLmxlbmd0aCA9PT0gMFxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLnNvcnRhYmxlRGF0YVNlcnZpY2Uuc29ydGFibGVDb250YWluZXIuZHJvcEVuYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5pbnNlcnRJdGVtQXQoaXRlbSwgMCk7XG4gICAgICAgIHRoaXMuc29ydGFibGVEYXRhU2VydmljZS5zb3J0YWJsZUNvbnRhaW5lciA9IHRoaXM7XG4gICAgICAgIHRoaXMuc29ydGFibGVEYXRhU2VydmljZS5pbmRleCA9IDA7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIH1cbiAgfVxuXG4gIGdldEl0ZW1BdChpbmRleDogbnVtYmVyKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy5fc29ydGFibGVIYW5kbGVyLmdldEl0ZW1BdCh0aGlzLl9zb3J0YWJsZURhdGEsIGluZGV4KTtcbiAgfVxuXG4gIGluZGV4T2YoaXRlbTogYW55KTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5fc29ydGFibGVIYW5kbGVyLmluZGV4T2YodGhpcy5fc29ydGFibGVEYXRhLCBpdGVtKTtcbiAgfVxuXG4gIHJlbW92ZUl0ZW1BdChpbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgdGhpcy5fc29ydGFibGVIYW5kbGVyLnJlbW92ZUl0ZW1BdCh0aGlzLl9zb3J0YWJsZURhdGEsIGluZGV4KTtcbiAgfVxuXG4gIGluc2VydEl0ZW1BdChpdGVtOiBhbnksIGluZGV4OiBudW1iZXIpIHtcbiAgICB0aGlzLl9zb3J0YWJsZUhhbmRsZXIuaW5zZXJ0SXRlbUF0KHRoaXMuX3NvcnRhYmxlRGF0YSwgaXRlbSwgaW5kZXgpO1xuICB9XG59XG4iXX0=
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Directive, ElementRef, EventEmitter, Input, Output, } from '@angular/core';
import { DragDropConfig } from '../config/drag-drop-config';
import { DragDropSortableService } from '../service/drag-drop-sortable/drag-drop-sortable.service';
import { DragDropService } from '../service/drag-drop/drag-drop.service';
import { AbstractDirective } from './abstract/abstract.directive';
import { SortableContainerDirective } from './sortable-container.directive';
/* tslint:disable directive-selector no-output-on-prefix */
var SortableDirective = /** @class */ (function (_super) {
    tslib_1.__extends(SortableDirective, _super);
    function SortableDirective(elementRef, dragDropService, config, sortableContainer, sortableDataService, cdr) {
        var _this = _super.call(this, elementRef, dragDropService, config, cdr) || this;
        _this.sortableContainer = sortableContainer;
        _this.sortableDataService = sortableDataService;
        _this.onDragSuccess = new EventEmitter();
        _this.onDragStart = new EventEmitter();
        _this.onDragOver = new EventEmitter();
        _this.onDragEnd = new EventEmitter();
        _this.onDropSuccess = new EventEmitter();
        _this.dropZones = _this.sortableContainer.dropZones;
        _this.dragEnabled = true;
        _this.dropEnabled = true;
        return _this;
    }
    /**
     * @return {?}
     */
    SortableDirective.prototype.dragStartCallback = /**
     * @return {?}
     */
    function () {
        this.sortableDataService.isDragged = true;
        this.sortableDataService.sortableContainer = this.sortableContainer;
        this.sortableDataService.index = this.sortableIndex;
        this.sortableDataService.markSortable(this.element);
        this.dragDropService.isDragged = true;
        this.dragDropService.dragData = this.dragData;
        this.dragDropService.onDragSuccessCallback = this.onDragSuccess;
        this.onDragStart.emit(this.dragDropService.dragData);
    };
    /**
     * @return {?}
     */
    SortableDirective.prototype.dragOverCallback = /**
     * @return {?}
     */
    function () {
        if (this.sortableDataService.isDragged &&
            this.element !== this.sortableDataService.element) {
            this.sortableDataService.sortableContainer = this.sortableContainer;
            this.sortableDataService.index = this.sortableIndex;
            this.sortableDataService.markSortable(this.element);
            this.onDragOver.emit(this.dragDropService.dragData);
        }
    };
    /**
     * @return {?}
     */
    SortableDirective.prototype.dragEndCallback = /**
     * @return {?}
     */
    function () {
        this.sortableDataService.isDragged = false;
        this.sortableDataService.sortableContainer = null;
        this.sortableDataService.index = null;
        this.sortableDataService.markSortable(null);
        this.dragDropService.isDragged = false;
        this.dragDropService.dragData = null;
        this.dragDropService.onDragSuccessCallback = null;
        this.onDragEnd.emit(this.dragDropService.dragData);
    };
    /**
     * @return {?}
     */
    SortableDirective.prototype.dragEnterCallback = /**
     * @return {?}
     */
    function () {
        if (this.sortableDataService.isDragged) {
            this.sortableDataService.markSortable(this.element);
            if (this.sortableIndex !== this.sortableDataService.index ||
                this.sortableDataService.sortableContainer.sortableData !==
                    this.sortableContainer.sortableData) {
                /** @type {?} */
                var item = this.sortableDataService.sortableContainer.getItemAt(this.sortableDataService.index);
                this.sortableDataService.sortableContainer.removeItemAt(this.sortableDataService.index);
                if (this.sortableDataService.sortableContainer.sortableData.length === 0) {
                    this.sortableDataService.sortableContainer.dropEnabled = true;
                }
                this.sortableContainer.insertItemAt(item, this.sortableIndex);
                if (this.sortableContainer.dropEnabled) {
                    this.sortableContainer.dropEnabled = false;
                }
                this.sortableDataService.sortableContainer = this.sortableContainer;
                this.sortableDataService.index = this.sortableIndex;
                this.detectChanges();
            }
        }
    };
    /**
     * @return {?}
     */
    SortableDirective.prototype.dropCallback = /**
     * @return {?}
     */
    function () {
        if (this.sortableDataService.isDragged) {
            this.onDropSuccess.emit(this.dragDropService.dragData);
            if (this.dragDropService.onDragSuccessCallback) {
                this.dragDropService.onDragSuccessCallback.emit(this.dragDropService.dragData);
            }
            this.sortableContainer.detectChanges();
        }
    };
    SortableDirective.decorators = [
        { type: Directive, args: [{ selector: '[dnd-sortable]' },] }
    ];
    /** @nocollapse */
    SortableDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: DragDropService },
        { type: DragDropConfig },
        { type: SortableContainerDirective },
        { type: DragDropSortableService },
        { type: ChangeDetectorRef }
    ]; };
    SortableDirective.propDecorators = {
        sortableIndex: [{ type: Input }],
        dragData: [{ type: Input }],
        onDragSuccess: [{ type: Output }],
        onDragStart: [{ type: Output }],
        onDragOver: [{ type: Output }],
        onDragEnd: [{ type: Output }],
        onDropSuccess: [{ type: Output }]
    };
    return SortableDirective;
}(AbstractDirective));
export { SortableDirective };
if (false) {
    /** @type {?} */
    SortableDirective.prototype.sortableIndex;
    /** @type {?} */
    SortableDirective.prototype.dragData;
    /** @type {?} */
    SortableDirective.prototype.onDragSuccess;
    /** @type {?} */
    SortableDirective.prototype.onDragStart;
    /** @type {?} */
    SortableDirective.prototype.onDragOver;
    /** @type {?} */
    SortableDirective.prototype.onDragEnd;
    /** @type {?} */
    SortableDirective.prototype.onDropSuccess;
    /**
     * @type {?}
     * @private
     */
    SortableDirective.prototype.sortableContainer;
    /**
     * @type {?}
     * @private
     */
    SortableDirective.prototype.sortableDataService;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { DataTransferEffect } from './data-transfer-effect';
import * as i0 from "@angular/core";
var DragDropConfig = /** @class */ (function () {
    function DragDropConfig() {
        this.onDragStartClass = 'dnd-drag-start';
        this.onDragEnterClass = 'dnd-drag-enter';
        this.onDragOverClass = 'dnd-drag-over';
        this.onSortableDragClass = 'dnd-sortable-drag';
        this.dragEffect = DataTransferEffect.MOVE;
        this.dropEffect = DataTransferEffect.MOVE;
        this.dragCursor = 'move';
        this.defaultCursor = 'pointer';
    }
    DragDropConfig.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */ DragDropConfig.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function DragDropConfig_Factory() { return new DragDropConfig(); }, token: DragDropConfig, providedIn: "root" });
    return DragDropConfig;
}());
export { DragDropConfig };
if (false) {
    /** @type {?} */
    DragDropConfig.prototype.onDragStartClass;
    /** @type {?} */
    DragDropConfig.prototype.onDragEnterClass;
    /** @type {?} */
    DragDropConfig.prototype.onDragOverClass;
    /** @type {?} */
    DragDropConfig.prototype.onSortableDragClass;
    /** @type {?} */
    DragDropConfig.prototype.dragEffect;
    /** @type {?} */
    DragDropConfig.prototype.dropEffect;
    /** @type {?} */
    DragDropConfig.prototype.dragCursor;
    /** @type {?} */
    DragDropConfig.prototype.dragImage;
    /** @type {?} */
    DragDropConfig.prototype.defaultCursor;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1kcm9wLWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BiZXllcmxlaW5mL25neC1kbmQvIiwic291cmNlcyI6WyJsaWIvY29uZmlnL2RyYWctZHJvcC1jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7O0FBRzVEO0lBQUE7UUFFUyxxQkFBZ0IsR0FBVyxnQkFBZ0IsQ0FBQztRQUM1QyxxQkFBZ0IsR0FBVyxnQkFBZ0IsQ0FBQztRQUM1QyxvQkFBZSxHQUFXLGVBQWUsQ0FBQztRQUMxQyx3QkFBbUIsR0FBVyxtQkFBbUIsQ0FBQztRQUVsRCxlQUFVLEdBQXVCLGtCQUFrQixDQUFDLElBQUksQ0FBQztRQUN6RCxlQUFVLEdBQXVCLGtCQUFrQixDQUFDLElBQUksQ0FBQztRQUN6RCxlQUFVLEdBQVcsTUFBTSxDQUFDO1FBRTVCLGtCQUFhLEdBQVcsU0FBUyxDQUFDO0tBQzFDOztnQkFaQSxVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7eUJBTGxDO0NBaUJDLEFBWkQsSUFZQztTQVhZLGNBQWM7OztJQUN6QiwwQ0FBbUQ7O0lBQ25ELDBDQUFtRDs7SUFDbkQseUNBQWlEOztJQUNqRCw2Q0FBeUQ7O0lBRXpELG9DQUFnRTs7SUFDaEUsb0NBQWdFOztJQUNoRSxvQ0FBbUM7O0lBQ25DLG1DQUE0Qjs7SUFDNUIsdUNBQXlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBEYXRhVHJhbnNmZXJFZmZlY3QgfSBmcm9tICcuL2RhdGEtdHJhbnNmZXItZWZmZWN0JztcbmltcG9ydCB7IERyYWdJbWFnZSB9IGZyb20gJy4vZHJhZy1pbWFnZSc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgRHJhZ0Ryb3BDb25maWcge1xuICBwdWJsaWMgb25EcmFnU3RhcnRDbGFzczogc3RyaW5nID0gJ2RuZC1kcmFnLXN0YXJ0JztcbiAgcHVibGljIG9uRHJhZ0VudGVyQ2xhc3M6IHN0cmluZyA9ICdkbmQtZHJhZy1lbnRlcic7XG4gIHB1YmxpYyBvbkRyYWdPdmVyQ2xhc3M6IHN0cmluZyA9ICdkbmQtZHJhZy1vdmVyJztcbiAgcHVibGljIG9uU29ydGFibGVEcmFnQ2xhc3M6IHN0cmluZyA9ICdkbmQtc29ydGFibGUtZHJhZyc7XG5cbiAgcHVibGljIGRyYWdFZmZlY3Q6IERhdGFUcmFuc2ZlckVmZmVjdCA9IERhdGFUcmFuc2ZlckVmZmVjdC5NT1ZFO1xuICBwdWJsaWMgZHJvcEVmZmVjdDogRGF0YVRyYW5zZmVyRWZmZWN0ID0gRGF0YVRyYW5zZmVyRWZmZWN0Lk1PVkU7XG4gIHB1YmxpYyBkcmFnQ3Vyc29yOiBzdHJpbmcgPSAnbW92ZSc7XG4gIHB1YmxpYyBkcmFnSW1hZ2U6IERyYWdJbWFnZTtcbiAgcHVibGljIGRlZmF1bHRDdXJzb3I6IHN0cmluZyA9ICdwb2ludGVyJztcbn1cbiJdfQ==
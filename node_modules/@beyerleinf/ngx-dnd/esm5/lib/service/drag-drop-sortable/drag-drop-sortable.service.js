/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { DragDropConfig } from '../../config/drag-drop-config';
import { isPresent } from '../../util';
import * as i0 from "@angular/core";
import * as i1 from "../../config/drag-drop-config";
var DragDropSortableService = /** @class */ (function () {
    /**
     *Creates an instance of DragDropSortableService.
     * @param config The DragDropConfig.
     * @memberof DragDropSortableService
     */
    function DragDropSortableService(config) {
        this.config = config;
    }
    Object.defineProperty(DragDropSortableService.prototype, "element", {
        /**
         * Gets the last element that was marked sortable.
         *
         * @readonly
         * @memberof DragDropSortableService
         */
        get: /**
         * Gets the last element that was marked sortable.
         *
         * \@readonly
         * \@memberof DragDropSortableService
         * @return {?}
         */
        function () {
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Assigns the `onSortableDragClass` to the given element.
     *
     * @param e The element to assign the CSS class to.
     * @memberof DragDropSortableService
     */
    /**
     * Assigns the `onSortableDragClass` to the given element.
     *
     * \@memberof DragDropSortableService
     * @param {?} e The element to assign the CSS class to.
     * @return {?}
     */
    DragDropSortableService.prototype.markSortable = /**
     * Assigns the `onSortableDragClass` to the given element.
     *
     * \@memberof DragDropSortableService
     * @param {?} e The element to assign the CSS class to.
     * @return {?}
     */
    function (e) {
        if (isPresent(this._element)) {
            this._element.classList.remove(this.config.onSortableDragClass);
        }
        if (isPresent(e)) {
            this._element = e;
            this._element.classList.add(this.config.onSortableDragClass);
        }
    };
    DragDropSortableService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    DragDropSortableService.ctorParameters = function () { return [
        { type: DragDropConfig }
    ]; };
    /** @nocollapse */ DragDropSortableService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function DragDropSortableService_Factory() { return new DragDropSortableService(i0.ɵɵinject(i1.DragDropConfig)); }, token: DragDropSortableService, providedIn: "root" });
    return DragDropSortableService;
}());
export { DragDropSortableService };
if (false) {
    /**
     * The last element that was marked sortable.
     *
     * \@memberof DragDropSortableService
     * @type {?}
     * @private
     */
    DragDropSortableService.prototype._element;
    /** @type {?} */
    DragDropSortableService.prototype.index;
    /** @type {?} */
    DragDropSortableService.prototype.sortableContainer;
    /** @type {?} */
    DragDropSortableService.prototype.isDragged;
    /**
     * @type {?}
     * @private
     */
    DragDropSortableService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1kcm9wLXNvcnRhYmxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYmV5ZXJsZWluZi9uZ3gtZG5kLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2UvZHJhZy1kcm9wLXNvcnRhYmxlL2RyYWctZHJvcC1zb3J0YWJsZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUUvRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sWUFBWSxDQUFDOzs7QUFFdkM7SUFlRTs7OztPQUlHO0lBQ0gsaUNBQW9CLE1BQXNCO1FBQXRCLFdBQU0sR0FBTixNQUFNLENBQWdCO0lBQUcsQ0FBQztJQVE5QyxzQkFBSSw0Q0FBTztRQU5YOzs7OztXQUtHOzs7Ozs7OztRQUNIO1lBQ0UsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3ZCLENBQUM7OztPQUFBO0lBRUQ7Ozs7O09BS0c7Ozs7Ozs7O0lBQ0gsOENBQVk7Ozs7Ozs7SUFBWixVQUFhLENBQWM7UUFDekIsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQzVCLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLENBQUM7U0FDakU7UUFFRCxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNoQixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztZQUNsQixJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQzlEO0lBQ0gsQ0FBQzs7Z0JBL0NGLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7Ozs7Z0JBSnpCLGNBQWM7OztrQ0FGdkI7Q0FzREMsQUFoREQsSUFnREM7U0EvQ1ksdUJBQXVCOzs7Ozs7Ozs7SUFNbEMsMkNBQThCOztJQUU5Qix3Q0FBYzs7SUFFZCxvREFBOEM7O0lBRTlDLDRDQUFtQjs7Ozs7SUFPUCx5Q0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IERyYWdEcm9wQ29uZmlnIH0gZnJvbSAnLi4vLi4vY29uZmlnL2RyYWctZHJvcC1jb25maWcnO1xuaW1wb3J0IHsgU29ydGFibGVDb250YWluZXJEaXJlY3RpdmUgfSBmcm9tICcuLi8uLi9kaXJlY3RpdmVzL3NvcnRhYmxlLWNvbnRhaW5lci5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgaXNQcmVzZW50IH0gZnJvbSAnLi4vLi4vdXRpbCc7XG5cbkBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pXG5leHBvcnQgY2xhc3MgRHJhZ0Ryb3BTb3J0YWJsZVNlcnZpY2Uge1xuICAvKipcbiAgICogVGhlIGxhc3QgZWxlbWVudCB0aGF0IHdhcyBtYXJrZWQgc29ydGFibGUuXG4gICAqXG4gICAqIEBtZW1iZXJvZiBEcmFnRHJvcFNvcnRhYmxlU2VydmljZVxuICAgKi9cbiAgcHJpdmF0ZSBfZWxlbWVudDogSFRNTEVsZW1lbnQ7XG5cbiAgaW5kZXg6IG51bWJlcjtcblxuICBzb3J0YWJsZUNvbnRhaW5lcjogU29ydGFibGVDb250YWluZXJEaXJlY3RpdmU7XG5cbiAgaXNEcmFnZ2VkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKkNyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgRHJhZ0Ryb3BTb3J0YWJsZVNlcnZpY2UuXG4gICAqIEBwYXJhbSBjb25maWcgVGhlIERyYWdEcm9wQ29uZmlnLlxuICAgKiBAbWVtYmVyb2YgRHJhZ0Ryb3BTb3J0YWJsZVNlcnZpY2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY29uZmlnOiBEcmFnRHJvcENvbmZpZykge31cblxuICAvKipcbiAgICogR2V0cyB0aGUgbGFzdCBlbGVtZW50IHRoYXQgd2FzIG1hcmtlZCBzb3J0YWJsZS5cbiAgICpcbiAgICogQHJlYWRvbmx5XG4gICAqIEBtZW1iZXJvZiBEcmFnRHJvcFNvcnRhYmxlU2VydmljZVxuICAgKi9cbiAgZ2V0IGVsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xuICAgIHJldHVybiB0aGlzLl9lbGVtZW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEFzc2lnbnMgdGhlIGBvblNvcnRhYmxlRHJhZ0NsYXNzYCB0byB0aGUgZ2l2ZW4gZWxlbWVudC5cbiAgICpcbiAgICogQHBhcmFtIGUgVGhlIGVsZW1lbnQgdG8gYXNzaWduIHRoZSBDU1MgY2xhc3MgdG8uXG4gICAqIEBtZW1iZXJvZiBEcmFnRHJvcFNvcnRhYmxlU2VydmljZVxuICAgKi9cbiAgbWFya1NvcnRhYmxlKGU6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgaWYgKGlzUHJlc2VudCh0aGlzLl9lbGVtZW50KSkge1xuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuY29uZmlnLm9uU29ydGFibGVEcmFnQ2xhc3MpO1xuICAgIH1cblxuICAgIGlmIChpc1ByZXNlbnQoZSkpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQgPSBlO1xuICAgICAgdGhpcy5fZWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuY29uZmlnLm9uU29ydGFibGVEcmFnQ2xhc3MpO1xuICAgIH1cbiAgfVxufVxuIl19
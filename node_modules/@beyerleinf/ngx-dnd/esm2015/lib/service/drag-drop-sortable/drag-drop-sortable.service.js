/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { DragDropConfig } from '../../config/drag-drop-config';
import { isPresent } from '../../util';
import * as i0 from "@angular/core";
import * as i1 from "../../config/drag-drop-config";
export class DragDropSortableService {
    /**
     * Creates an instance of DragDropSortableService.
     * \@memberof DragDropSortableService
     * @param {?} config The DragDropConfig.
     */
    constructor(config) {
        this.config = config;
    }
    /**
     * Gets the last element that was marked sortable.
     *
     * \@readonly
     * \@memberof DragDropSortableService
     * @return {?}
     */
    get element() {
        return this._element;
    }
    /**
     * Assigns the `onSortableDragClass` to the given element.
     *
     * \@memberof DragDropSortableService
     * @param {?} e The element to assign the CSS class to.
     * @return {?}
     */
    markSortable(e) {
        if (isPresent(this._element)) {
            this._element.classList.remove(this.config.onSortableDragClass);
        }
        if (isPresent(e)) {
            this._element = e;
            this._element.classList.add(this.config.onSortableDragClass);
        }
    }
}
DragDropSortableService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
DragDropSortableService.ctorParameters = () => [
    { type: DragDropConfig }
];
/** @nocollapse */ DragDropSortableService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function DragDropSortableService_Factory() { return new DragDropSortableService(i0.ɵɵinject(i1.DragDropConfig)); }, token: DragDropSortableService, providedIn: "root" });
if (false) {
    /**
     * The last element that was marked sortable.
     *
     * \@memberof DragDropSortableService
     * @type {?}
     * @private
     */
    DragDropSortableService.prototype._element;
    /** @type {?} */
    DragDropSortableService.prototype.index;
    /** @type {?} */
    DragDropSortableService.prototype.sortableContainer;
    /** @type {?} */
    DragDropSortableService.prototype.isDragged;
    /**
     * @type {?}
     * @private
     */
    DragDropSortableService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1kcm9wLXNvcnRhYmxlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AYmV5ZXJsZWluZi9uZ3gtZG5kLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2UvZHJhZy1kcm9wLXNvcnRhYmxlL2RyYWctZHJvcC1zb3J0YWJsZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUUvRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sWUFBWSxDQUFDOzs7QUFHdkMsTUFBTSxPQUFPLHVCQUF1Qjs7Ozs7O0lBbUJsQyxZQUFvQixNQUFzQjtRQUF0QixXQUFNLEdBQU4sTUFBTSxDQUFnQjtJQUFHLENBQUM7Ozs7Ozs7O0lBUTlDLElBQUksT0FBTztRQUNULE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN2QixDQUFDOzs7Ozs7OztJQVFELFlBQVksQ0FBQyxDQUFjO1FBQ3pCLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUM1QixJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1NBQ2pFO1FBRUQsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDaEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7WUFDbEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQztTQUM5RDtJQUNILENBQUM7OztZQS9DRixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7O1lBSnpCLGNBQWM7Ozs7Ozs7Ozs7O0lBV3JCLDJDQUE4Qjs7SUFFOUIsd0NBQWM7O0lBRWQsb0RBQThDOztJQUU5Qyw0Q0FBbUI7Ozs7O0lBT1AseUNBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBEcmFnRHJvcENvbmZpZyB9IGZyb20gJy4uLy4uL2NvbmZpZy9kcmFnLWRyb3AtY29uZmlnJztcbmltcG9ydCB7IFNvcnRhYmxlQ29udGFpbmVyRGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vZGlyZWN0aXZlcy9zb3J0YWJsZS1jb250YWluZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IGlzUHJlc2VudCB9IGZyb20gJy4uLy4uL3V0aWwnO1xuXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxuZXhwb3J0IGNsYXNzIERyYWdEcm9wU29ydGFibGVTZXJ2aWNlIHtcbiAgLyoqXG4gICAqIFRoZSBsYXN0IGVsZW1lbnQgdGhhdCB3YXMgbWFya2VkIHNvcnRhYmxlLlxuICAgKlxuICAgKiBAbWVtYmVyb2YgRHJhZ0Ryb3BTb3J0YWJsZVNlcnZpY2VcbiAgICovXG4gIHByaXZhdGUgX2VsZW1lbnQ6IEhUTUxFbGVtZW50O1xuXG4gIGluZGV4OiBudW1iZXI7XG5cbiAgc29ydGFibGVDb250YWluZXI6IFNvcnRhYmxlQ29udGFpbmVyRGlyZWN0aXZlO1xuXG4gIGlzRHJhZ2dlZDogYm9vbGVhbjtcblxuICAvKipcbiAgICpDcmVhdGVzIGFuIGluc3RhbmNlIG9mIERyYWdEcm9wU29ydGFibGVTZXJ2aWNlLlxuICAgKiBAcGFyYW0gY29uZmlnIFRoZSBEcmFnRHJvcENvbmZpZy5cbiAgICogQG1lbWJlcm9mIERyYWdEcm9wU29ydGFibGVTZXJ2aWNlXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNvbmZpZzogRHJhZ0Ryb3BDb25maWcpIHt9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGxhc3QgZWxlbWVudCB0aGF0IHdhcyBtYXJrZWQgc29ydGFibGUuXG4gICAqXG4gICAqIEByZWFkb25seVxuICAgKiBAbWVtYmVyb2YgRHJhZ0Ryb3BTb3J0YWJsZVNlcnZpY2VcbiAgICovXG4gIGdldCBlbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBc3NpZ25zIHRoZSBgb25Tb3J0YWJsZURyYWdDbGFzc2AgdG8gdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAqXG4gICAqIEBwYXJhbSBlIFRoZSBlbGVtZW50IHRvIGFzc2lnbiB0aGUgQ1NTIGNsYXNzIHRvLlxuICAgKiBAbWVtYmVyb2YgRHJhZ0Ryb3BTb3J0YWJsZVNlcnZpY2VcbiAgICovXG4gIG1hcmtTb3J0YWJsZShlOiBIVE1MRWxlbWVudCk6IHZvaWQge1xuICAgIGlmIChpc1ByZXNlbnQodGhpcy5fZWxlbWVudCkpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmNvbmZpZy5vblNvcnRhYmxlRHJhZ0NsYXNzKTtcbiAgICB9XG5cbiAgICBpZiAoaXNQcmVzZW50KGUpKSB7XG4gICAgICB0aGlzLl9lbGVtZW50ID0gZTtcbiAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLmNvbmZpZy5vblNvcnRhYmxlRHJhZ0NsYXNzKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
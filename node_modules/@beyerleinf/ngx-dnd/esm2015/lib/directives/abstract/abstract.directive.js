/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input } from '@angular/core';
import { isPresent } from '../../util';
/**
 * @abstract
 */
export class AbstractDirective {
    /**
     * @param {?} elementReference
     * @param {?} dragDropService
     * @param {?} config
     * @param {?} cdr
     */
    constructor(elementReference, dragDropService, config, cdr) {
        this.dragDropService = dragDropService;
        this.config = config;
        this.cdr = cdr;
        this._dragEnabled = true;
        this.dropEnabled = false;
        this.dropZones = [];
        this.cloneItem = false;
        this.defaultCursor = this.config.defaultCursor;
        this.element = elementReference.nativeElement;
        this.element.style.cursor = this.defaultCursor;
        // Register drop events
        this.element.ondragenter = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => this.dragEnter(event));
        this.element.ondragleave = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => this.dragLeave(event));
        this.element.ondrop = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => this.drop(event));
        this.element.ondragover = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.dragOver(event);
            if (isPresent(event.dataTransfer)) {
                event.dataTransfer.dropEffect = this.config.dropEffect.name;
            }
            return false;
        });
        // Register drag events
        this.element.onmousedown = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            this.target = event.target;
        });
        this.element.ondragstart = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (isPresent(this.dragHandle)) {
                if (!this.dragHandle.contains((/** @type {?} */ (this.target)))) {
                    event.preventDefault();
                    return;
                }
            }
            this.dragStart(event);
            if (isPresent(event.dataTransfer)) {
                // Required so that this whole thing works in Firefox at all
                event.dataTransfer.setData('text', '');
            }
        });
        this.element.ondragend = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (this.element.parentElement && this.dragHelper) {
                this.element.parentElement.removeChild(this.dragHelper);
            }
            // console.log('ondragend', event.target);
            this.dragEnd(event);
            // Restore style of dragged element
            /** @type {?} */
            const cursorElem = this._dragHandle ? this._dragHandle : this.element;
            cursorElem.style.cursor = this.defaultCursor;
        });
    }
    /**
     * @return {?}
     */
    get dragEnabled() {
        return this._dragEnabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set dragEnabled(value) {
        this._dragEnabled = value;
        this.element.draggable = value;
    }
    /**
     * @return {?}
     */
    get dragHandle() {
        return this._dragHandle;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set dragHandle(value) {
        this._dragHandle = value;
    }
    /**
     * Run change detection manually to fix an issue in Safari.
     *
     * \@memberof AbstractDirective
     * @return {?}
     */
    detectChanges() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.cdr && !((/** @type {?} */ (this.cdr))).destroyed) {
                this.cdr.detectChanges();
            }
        }), 250);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    dragEnter(event) {
        if (this.isDropAllowed(event)) {
            this.dragEnterCallback(event);
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    dragOver(event) {
        if (this.isDropAllowed(event)) {
            if (isPresent(event.preventDefault)) {
                event.preventDefault();
            }
            this.dragOverCallback(event);
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    dragLeave(event) {
        if (this.isDropAllowed(event)) {
            this.dragLeaveCallback(event);
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    drop(event) {
        if (this.isDropAllowed(event)) {
            this.preventAndStop(event);
            this.dropCallback(event);
            this.detectChanges();
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    dragStart(event) {
        if (this.dragEnabled) {
            this.dragDropService.allowedDropZones = this.dropZones;
            this.dragStartCallback(event);
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    dragEnd(event) {
        this.dragDropService.allowedDropZones = [];
        this.dragEndCallback(event);
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    isDropAllowed(event) {
        if ((this.dragDropService.isDragged ||
            (event.dataTransfer && event.dataTransfer.files)) &&
            this.dropEnabled) {
            if (isPresent(this.allowDrop)) {
                return this.allowDrop(this.dragDropService.dragData);
            }
            if (this.dropZones.length === 0 &&
                this.dragDropService.allowedDropZones.length === 0) {
                return true;
            }
            for (const dropZone of this.dragDropService.allowedDropZones) {
                if (this.dropZones.indexOf(dropZone) !== -1) {
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * Prevent the given events default action from being called and stops it from being propagated further.
     *
     * \@memberof AbstractDirective
     * @private
     * @param {?} event
     * @return {?}
     */
    preventAndStop(event) {
        if (event.preventDefault) {
            event.preventDefault();
        }
        if (event.stopPropagation) {
            event.stopPropagation();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dragEnterCallback(event) {
        /* noop */
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dragOverCallback(event) {
        /* noop */
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dragLeaveCallback(event) {
        /* noop */
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dropCallback(event) {
        /* noop */
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dragStartCallback(event) {
        /* noop */
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dragEndCallback(event) {
        /* noop */
    }
}
AbstractDirective.propDecorators = {
    dropEnabled: [{ type: Input }],
    effectAllowed: [{ type: Input }],
    effectCursor: [{ type: Input }],
    dropZones: [{ type: Input }],
    allowDrop: [{ type: Input }],
    dragImage: [{ type: Input }],
    cloneItem: [{ type: Input }],
    dragEnabled: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    AbstractDirective.prototype.element;
    /**
     * @type {?}
     * @private
     */
    AbstractDirective.prototype._dragHandle;
    /** @type {?} */
    AbstractDirective.prototype.dragHelper;
    /** @type {?} */
    AbstractDirective.prototype.defaultCursor;
    /** @type {?} */
    AbstractDirective.prototype.target;
    /**
     * @type {?}
     * @private
     */
    AbstractDirective.prototype._dragEnabled;
    /** @type {?} */
    AbstractDirective.prototype.dropEnabled;
    /** @type {?} */
    AbstractDirective.prototype.effectAllowed;
    /** @type {?} */
    AbstractDirective.prototype.effectCursor;
    /** @type {?} */
    AbstractDirective.prototype.dropZones;
    /** @type {?} */
    AbstractDirective.prototype.allowDrop;
    /** @type {?} */
    AbstractDirective.prototype.dragImage;
    /** @type {?} */
    AbstractDirective.prototype.cloneItem;
    /** @type {?} */
    AbstractDirective.prototype.dragDropService;
    /** @type {?} */
    AbstractDirective.prototype.config;
    /**
     * @type {?}
     * @private
     */
    AbstractDirective.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,
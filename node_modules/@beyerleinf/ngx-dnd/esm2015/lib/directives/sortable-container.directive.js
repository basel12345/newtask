/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Directive, ElementRef, Input } from '@angular/core';
import { FormArray } from '@angular/forms';
import { DragDropConfig } from '../config/drag-drop-config';
import { DragDropSortableService } from '../service/drag-drop-sortable/drag-drop-sortable.service';
import { DragDropService } from '../service/drag-drop/drag-drop.service';
import { SortableArrayHandler, SortableFormArrayHandler } from '../util';
import { AbstractDirective } from './abstract/abstract.directive';
/* tslint:disable directive-selector */
export class SortableContainerDirective extends AbstractDirective {
    /**
     * @param {?} elementRef
     * @param {?} dragDropService
     * @param {?} config
     * @param {?} cdr
     * @param {?} sortableDataService
     */
    constructor(elementRef, dragDropService, config, cdr, sortableDataService) {
        super(elementRef, dragDropService, config, cdr);
        this.sortableDataService = sortableDataService;
        this._sortableData = [];
        this.dragEnabled = false;
    }
    /**
     * @param {?} sortableData
     * @return {?}
     */
    set sortableData(sortableData) {
        this._sortableData = sortableData;
        if (sortableData instanceof FormArray) {
            this._sortableHandler = new SortableFormArrayHandler();
        }
        else {
            this._sortableHandler = new SortableArrayHandler();
        }
        this.dropEnabled = !!this._sortableData;
    }
    /**
     * @return {?}
     */
    get sortableData() {
        return this._sortableData;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dragEnterCallback(event) {
        if (this.sortableDataService.isDragged) {
            /** @type {?} */
            const item = this.sortableDataService.sortableContainer.getItemAt(this.sortableDataService.index);
            if (this.indexOf(item === -1)) {
                this.sortableDataService.sortableContainer.removeItemAt(this.sortableDataService.index);
                if (this.sortableDataService.sortableContainer.sortableData.length === 0) {
                    this.sortableDataService.sortableContainer.dropEnabled = true;
                }
                this.insertItemAt(item, 0);
                this.sortableDataService.sortableContainer = this;
                this.sortableDataService.index = 0;
            }
            this.detectChanges();
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getItemAt(index) {
        return this._sortableHandler.getItemAt(this._sortableData, index);
    }
    /**
     * @param {?} item
     * @return {?}
     */
    indexOf(item) {
        return this._sortableHandler.indexOf(this._sortableData, item);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    removeItemAt(index) {
        this._sortableHandler.removeItemAt(this._sortableData, index);
    }
    /**
     * @param {?} item
     * @param {?} index
     * @return {?}
     */
    insertItemAt(item, index) {
        this._sortableHandler.insertItemAt(this._sortableData, item, index);
    }
}
SortableContainerDirective.decorators = [
    { type: Directive, args: [{ selector: '[dnd-sortable-container]' },] }
];
/** @nocollapse */
SortableContainerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: DragDropService },
    { type: DragDropConfig },
    { type: ChangeDetectorRef },
    { type: DragDropSortableService }
];
SortableContainerDirective.propDecorators = {
    sortableData: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    SortableContainerDirective.prototype._sortableData;
    /**
     * @type {?}
     * @private
     */
    SortableContainerDirective.prototype._sortableHandler;
    /**
     * @type {?}
     * @private
     */
    SortableContainerDirective.prototype.sortableDataService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydGFibGUtY29udGFpbmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BiZXllcmxlaW5mL25neC1kbmQvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9zb3J0YWJsZS1jb250YWluZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM1RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwwREFBMEQsQ0FBQztBQUNuRyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDekUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLHdCQUF3QixFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRXpFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLCtCQUErQixDQUFDOztBQUlsRSxNQUFNLE9BQU8sMEJBQTJCLFNBQVEsaUJBQWlCOzs7Ozs7OztJQW9CL0QsWUFDRSxVQUFzQixFQUN0QixlQUFnQyxFQUNoQyxNQUFzQixFQUN0QixHQUFzQixFQUNkLG1CQUE0QztRQUVwRCxLQUFLLENBQUMsVUFBVSxFQUFFLGVBQWUsRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFGeEMsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUF5QjtRQUdwRCxJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQztRQUN4QixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztJQUMzQixDQUFDOzs7OztJQTFCRCxJQUNJLFlBQVksQ0FBQyxZQUFvQztRQUNuRCxJQUFJLENBQUMsYUFBYSxHQUFHLFlBQVksQ0FBQztRQUNsQyxJQUFJLFlBQVksWUFBWSxTQUFTLEVBQUU7WUFDckMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksd0JBQXdCLEVBQUUsQ0FBQztTQUN4RDthQUFNO1lBQ0wsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksb0JBQW9CLEVBQUUsQ0FBQztTQUNwRDtRQUVELElBQUksQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDMUMsQ0FBQzs7OztJQUVELElBQUksWUFBWTtRQUNkLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM1QixDQUFDOzs7OztJQWNELGlCQUFpQixDQUFDLEtBQVk7UUFDNUIsSUFBSSxJQUFJLENBQUMsbUJBQW1CLENBQUMsU0FBUyxFQUFFOztrQkFDaEMsSUFBSSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQy9ELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQy9CO1lBRUQsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUM3QixJQUFJLENBQUMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsWUFBWSxDQUNyRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUMvQixDQUFDO2dCQUVGLElBQ0UsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLFlBQVksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUNwRTtvQkFDQSxJQUFJLENBQUMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQztpQkFDL0Q7Z0JBRUQsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxpQkFBaUIsR0FBRyxJQUFJLENBQUM7Z0JBQ2xELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO2FBQ3BDO1lBRUQsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQ3RCO0lBQ0gsQ0FBQzs7Ozs7SUFFRCxTQUFTLENBQUMsS0FBYTtRQUNyQixPQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNwRSxDQUFDOzs7OztJQUVELE9BQU8sQ0FBQyxJQUFTO1FBQ2YsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakUsQ0FBQzs7Ozs7SUFFRCxZQUFZLENBQUMsS0FBYTtRQUN4QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDaEUsQ0FBQzs7Ozs7O0lBRUQsWUFBWSxDQUFDLElBQVMsRUFBRSxLQUFhO1FBQ25DLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDdEUsQ0FBQzs7O1lBekVGLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSwwQkFBMEIsRUFBRTs7OztZQVhaLFVBQVU7WUFLeEMsZUFBZTtZQUZmLGNBQWM7WUFIZCxpQkFBaUI7WUFJakIsdUJBQXVCOzs7MkJBWTdCLEtBQUs7Ozs7Ozs7SUFITixtREFBeUM7Ozs7O0lBQ3pDLHNEQUEwRTs7Ozs7SUF1QnhFLHlEQUFvRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtQXJyYXkgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IERyYWdEcm9wQ29uZmlnIH0gZnJvbSAnLi4vY29uZmlnL2RyYWctZHJvcC1jb25maWcnO1xuaW1wb3J0IHsgRHJhZ0Ryb3BTb3J0YWJsZVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlL2RyYWctZHJvcC1zb3J0YWJsZS9kcmFnLWRyb3Atc29ydGFibGUuc2VydmljZSc7XG5pbXBvcnQgeyBEcmFnRHJvcFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlL2RyYWctZHJvcC9kcmFnLWRyb3Auc2VydmljZSc7XG5pbXBvcnQgeyBTb3J0YWJsZUFycmF5SGFuZGxlciwgU29ydGFibGVGb3JtQXJyYXlIYW5kbGVyIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmltcG9ydCB7IEFic3RyYWN0RGlyZWN0aXZlIH0gZnJvbSAnLi9hYnN0cmFjdC9hYnN0cmFjdC5kaXJlY3RpdmUnO1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZSBkaXJlY3RpdmUtc2VsZWN0b3IgKi9cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tkbmQtc29ydGFibGUtY29udGFpbmVyXScgfSlcbmV4cG9ydCBjbGFzcyBTb3J0YWJsZUNvbnRhaW5lckRpcmVjdGl2ZSBleHRlbmRzIEFic3RyYWN0RGlyZWN0aXZlIHtcbiAgcHJpdmF0ZSBfc29ydGFibGVEYXRhOiBhbnlbXSB8IEZvcm1BcnJheTtcbiAgcHJpdmF0ZSBfc29ydGFibGVIYW5kbGVyOiBTb3J0YWJsZUZvcm1BcnJheUhhbmRsZXIgfCBTb3J0YWJsZUFycmF5SGFuZGxlcjtcblxuICBASW5wdXQoKVxuICBzZXQgc29ydGFibGVEYXRhKHNvcnRhYmxlRGF0YTogQXJyYXk8YW55PiB8IEZvcm1BcnJheSkge1xuICAgIHRoaXMuX3NvcnRhYmxlRGF0YSA9IHNvcnRhYmxlRGF0YTtcbiAgICBpZiAoc29ydGFibGVEYXRhIGluc3RhbmNlb2YgRm9ybUFycmF5KSB7XG4gICAgICB0aGlzLl9zb3J0YWJsZUhhbmRsZXIgPSBuZXcgU29ydGFibGVGb3JtQXJyYXlIYW5kbGVyKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3NvcnRhYmxlSGFuZGxlciA9IG5ldyBTb3J0YWJsZUFycmF5SGFuZGxlcigpO1xuICAgIH1cblxuICAgIHRoaXMuZHJvcEVuYWJsZWQgPSAhIXRoaXMuX3NvcnRhYmxlRGF0YTtcbiAgfVxuXG4gIGdldCBzb3J0YWJsZURhdGEoKTogQXJyYXk8YW55PiB8IEZvcm1BcnJheSB7XG4gICAgcmV0dXJuIHRoaXMuX3NvcnRhYmxlRGF0YTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICAgZHJhZ0Ryb3BTZXJ2aWNlOiBEcmFnRHJvcFNlcnZpY2UsXG4gICAgY29uZmlnOiBEcmFnRHJvcENvbmZpZyxcbiAgICBjZHI6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIHByaXZhdGUgc29ydGFibGVEYXRhU2VydmljZTogRHJhZ0Ryb3BTb3J0YWJsZVNlcnZpY2VcbiAgKSB7XG4gICAgc3VwZXIoZWxlbWVudFJlZiwgZHJhZ0Ryb3BTZXJ2aWNlLCBjb25maWcsIGNkcik7XG4gICAgdGhpcy5fc29ydGFibGVEYXRhID0gW107XG4gICAgdGhpcy5kcmFnRW5hYmxlZCA9IGZhbHNlO1xuICB9XG5cbiAgZHJhZ0VudGVyQ2FsbGJhY2soZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgaWYgKHRoaXMuc29ydGFibGVEYXRhU2VydmljZS5pc0RyYWdnZWQpIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLnNvcnRhYmxlRGF0YVNlcnZpY2Uuc29ydGFibGVDb250YWluZXIuZ2V0SXRlbUF0KFxuICAgICAgICB0aGlzLnNvcnRhYmxlRGF0YVNlcnZpY2UuaW5kZXhcbiAgICAgICk7XG5cbiAgICAgIGlmICh0aGlzLmluZGV4T2YoaXRlbSA9PT0gLTEpKSB7XG4gICAgICAgIHRoaXMuc29ydGFibGVEYXRhU2VydmljZS5zb3J0YWJsZUNvbnRhaW5lci5yZW1vdmVJdGVtQXQoXG4gICAgICAgICAgdGhpcy5zb3J0YWJsZURhdGFTZXJ2aWNlLmluZGV4XG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHRoaXMuc29ydGFibGVEYXRhU2VydmljZS5zb3J0YWJsZUNvbnRhaW5lci5zb3J0YWJsZURhdGEubGVuZ3RoID09PSAwXG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMuc29ydGFibGVEYXRhU2VydmljZS5zb3J0YWJsZUNvbnRhaW5lci5kcm9wRW5hYmxlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmluc2VydEl0ZW1BdChpdGVtLCAwKTtcbiAgICAgICAgdGhpcy5zb3J0YWJsZURhdGFTZXJ2aWNlLnNvcnRhYmxlQ29udGFpbmVyID0gdGhpcztcbiAgICAgICAgdGhpcy5zb3J0YWJsZURhdGFTZXJ2aWNlLmluZGV4ID0gMDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0SXRlbUF0KGluZGV4OiBudW1iZXIpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLl9zb3J0YWJsZUhhbmRsZXIuZ2V0SXRlbUF0KHRoaXMuX3NvcnRhYmxlRGF0YSwgaW5kZXgpO1xuICB9XG5cbiAgaW5kZXhPZihpdGVtOiBhbnkpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9zb3J0YWJsZUhhbmRsZXIuaW5kZXhPZih0aGlzLl9zb3J0YWJsZURhdGEsIGl0ZW0pO1xuICB9XG5cbiAgcmVtb3ZlSXRlbUF0KGluZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLl9zb3J0YWJsZUhhbmRsZXIucmVtb3ZlSXRlbUF0KHRoaXMuX3NvcnRhYmxlRGF0YSwgaW5kZXgpO1xuICB9XG5cbiAgaW5zZXJ0SXRlbUF0KGl0ZW06IGFueSwgaW5kZXg6IG51bWJlcikge1xuICAgIHRoaXMuX3NvcnRhYmxlSGFuZGxlci5pbnNlcnRJdGVtQXQodGhpcy5fc29ydGFibGVEYXRhLCBpdGVtLCBpbmRleCk7XG4gIH1cbn1cbiJdfQ==
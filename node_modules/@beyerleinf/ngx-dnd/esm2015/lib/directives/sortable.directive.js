/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Directive, ElementRef, EventEmitter, Input, Output, } from '@angular/core';
import { DragDropConfig } from '../config/drag-drop-config';
import { DragDropSortableService } from '../service/drag-drop-sortable/drag-drop-sortable.service';
import { DragDropService } from '../service/drag-drop/drag-drop.service';
import { AbstractDirective } from './abstract/abstract.directive';
import { SortableContainerDirective } from './sortable-container.directive';
/* tslint:disable directive-selector no-output-on-prefix */
export class SortableDirective extends AbstractDirective {
    /**
     * @param {?} elementRef
     * @param {?} dragDropService
     * @param {?} config
     * @param {?} sortableContainer
     * @param {?} sortableDataService
     * @param {?} cdr
     */
    constructor(elementRef, dragDropService, config, sortableContainer, sortableDataService, cdr) {
        super(elementRef, dragDropService, config, cdr);
        this.sortableContainer = sortableContainer;
        this.sortableDataService = sortableDataService;
        this.onDragSuccess = new EventEmitter();
        this.onDragStart = new EventEmitter();
        this.onDragOver = new EventEmitter();
        this.onDragEnd = new EventEmitter();
        this.onDropSuccess = new EventEmitter();
        this.dropZones = this.sortableContainer.dropZones;
        this.dragEnabled = true;
        this.dropEnabled = true;
    }
    /**
     * @return {?}
     */
    dragStartCallback() {
        this.sortableDataService.isDragged = true;
        this.sortableDataService.sortableContainer = this.sortableContainer;
        this.sortableDataService.index = this.sortableIndex;
        this.sortableDataService.markSortable(this.element);
        this.dragDropService.isDragged = true;
        this.dragDropService.dragData = this.dragData;
        this.dragDropService.onDragSuccessCallback = this.onDragSuccess;
        this.onDragStart.emit(this.dragDropService.dragData);
    }
    /**
     * @return {?}
     */
    dragOverCallback() {
        if (this.sortableDataService.isDragged &&
            this.element !== this.sortableDataService.element) {
            this.sortableDataService.sortableContainer = this.sortableContainer;
            this.sortableDataService.index = this.sortableIndex;
            this.sortableDataService.markSortable(this.element);
            this.onDragOver.emit(this.dragDropService.dragData);
        }
    }
    /**
     * @return {?}
     */
    dragEndCallback() {
        this.sortableDataService.isDragged = false;
        this.sortableDataService.sortableContainer = null;
        this.sortableDataService.index = null;
        this.sortableDataService.markSortable(null);
        this.dragDropService.isDragged = false;
        this.dragDropService.dragData = null;
        this.dragDropService.onDragSuccessCallback = null;
        this.onDragEnd.emit(this.dragDropService.dragData);
    }
    /**
     * @return {?}
     */
    dragEnterCallback() {
        if (this.sortableDataService.isDragged) {
            this.sortableDataService.markSortable(this.element);
            if (this.sortableIndex !== this.sortableDataService.index ||
                this.sortableDataService.sortableContainer.sortableData !==
                    this.sortableContainer.sortableData) {
                /** @type {?} */
                const item = this.sortableDataService.sortableContainer.getItemAt(this.sortableDataService.index);
                this.sortableDataService.sortableContainer.removeItemAt(this.sortableDataService.index);
                if (this.sortableDataService.sortableContainer.sortableData.length === 0) {
                    this.sortableDataService.sortableContainer.dropEnabled = true;
                }
                this.sortableContainer.insertItemAt(item, this.sortableIndex);
                if (this.sortableContainer.dropEnabled) {
                    this.sortableContainer.dropEnabled = false;
                }
                this.sortableDataService.sortableContainer = this.sortableContainer;
                this.sortableDataService.index = this.sortableIndex;
                this.detectChanges();
            }
        }
    }
    /**
     * @return {?}
     */
    dropCallback() {
        if (this.sortableDataService.isDragged) {
            this.onDropSuccess.emit(this.dragDropService.dragData);
            if (this.dragDropService.onDragSuccessCallback) {
                this.dragDropService.onDragSuccessCallback.emit(this.dragDropService.dragData);
            }
            this.sortableContainer.detectChanges();
        }
    }
}
SortableDirective.decorators = [
    { type: Directive, args: [{ selector: '[dnd-sortable]' },] }
];
/** @nocollapse */
SortableDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: DragDropService },
    { type: DragDropConfig },
    { type: SortableContainerDirective },
    { type: DragDropSortableService },
    { type: ChangeDetectorRef }
];
SortableDirective.propDecorators = {
    sortableIndex: [{ type: Input }],
    dragData: [{ type: Input }],
    onDragSuccess: [{ type: Output }],
    onDragStart: [{ type: Output }],
    onDragOver: [{ type: Output }],
    onDragEnd: [{ type: Output }],
    onDropSuccess: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    SortableDirective.prototype.sortableIndex;
    /** @type {?} */
    SortableDirective.prototype.dragData;
    /** @type {?} */
    SortableDirective.prototype.onDragSuccess;
    /** @type {?} */
    SortableDirective.prototype.onDragStart;
    /** @type {?} */
    SortableDirective.prototype.onDragOver;
    /** @type {?} */
    SortableDirective.prototype.onDragEnd;
    /** @type {?} */
    SortableDirective.prototype.onDropSuccess;
    /**
     * @type {?}
     * @private
     */
    SortableDirective.prototype.sortableContainer;
    /**
     * @type {?}
     * @private
     */
    SortableDirective.prototype.sortableDataService;
}
//# sourceMappingURL=data:application/json;base64,
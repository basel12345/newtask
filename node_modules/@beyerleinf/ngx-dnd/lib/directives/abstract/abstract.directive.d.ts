import { ChangeDetectorRef, ElementRef } from '@angular/core';
import { DragDropConfig } from '../../config/drag-drop-config';
import { DragImage } from '../../config/drag-image';
import { DragDropService } from '../../service/drag-drop/drag-drop.service';
export declare abstract class AbstractDirective {
    dragDropService: DragDropService;
    config: DragDropConfig;
    private cdr;
    element: HTMLElement;
    private _dragHandle;
    dragHelper: HTMLElement;
    defaultCursor: string;
    target: EventTarget;
    private _dragEnabled;
    dropEnabled: boolean;
    effectAllowed: string;
    effectCursor: string;
    dropZones: string[];
    allowDrop: (dropData: any) => boolean;
    dragImage: string | DragImage | Function;
    cloneItem: boolean;
    constructor(elementReference: ElementRef, dragDropService: DragDropService, config: DragDropConfig, cdr: ChangeDetectorRef);
    dragEnabled: boolean;
    dragHandle: HTMLElement;
    /**
     * Run change detection manually to fix an issue in Safari.
     *
     * @memberof AbstractDirective
     */
    detectChanges(): void;
    private dragEnter;
    private dragOver;
    private dragLeave;
    private drop;
    private dragStart;
    private dragEnd;
    private isDropAllowed;
    /**
     * Prevent the given events default action from being called and stops it from being propagated further.
     *
     * @memberof AbstractDirective
     */
    private preventAndStop;
    dragEnterCallback(event: Event): void;
    dragOverCallback(event: Event): void;
    dragLeaveCallback(event: Event): void;
    dropCallback(event: Event): void;
    dragStartCallback(event: Event): void;
    dragEndCallback(event: Event): void;
}
